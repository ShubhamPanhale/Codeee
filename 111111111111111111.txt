--Execution of IATA Invoice parsing starts from here
﻿--p_file_name is the file name to be parced to db..
PROCEDURE startExecute(p_file_name VARCHAR2) IS
p_inv_id NUMBER;
BEGIN
﻿--Call procedure to parse the xml into temporary table
﻿--it retrived invoice id which will be referenced to staging table 

In pos := 10;
BEGIN
xxap_iata_ml_parse_p(p_file_name, P_inv_id) ;
EXCEPTION
WHEN OTHERS THEN
In_err_code := SQLCODE;
In_err_ type := 2;
lv_msg := 'OPER=INSERT, TABLE=XXIE._AP_STD_INV_LINES_ALL, INV_ROW_ID = '|| V_inv_rowid;
Iv msg_name :- 'XXIF_WHEN_OTHERS_ ERROR';
XXS_ERRIOG_PRG.LOG_ERROR(Iv_pck,
lv_rout,
ln_pos,
ln_ erf_type,
ln_err_code,
Iv_msg,
lv_err_buf，
lv_msg_name,
ln_ret_err_code);
RAISE PROC_ERROR;
END;


--If parsing is successful insert data into AP Staging tables
BEGIN
xxap_iata_temp_to_staging_p (p_inv_id) ;

EXCEPTION
WHEN OTHERS THEN
In_err_code := SQLCODE;
In_err_ type := 2;
lv_msg := 'OPER=INSERT, TABLE=XXIE._AP_STD_INV_LINES_ALL, INV_ROW_ID = '|| V_inv_rowid;
Iv msg_name :- 'XXIF_WHEN_OTHERS_ ERROR';
XXS_ERRIOG_PRG.LOG_ERROR(Iv_pck,
lv_rout,
ln_pos,
ln_ erf_type,
ln_err_code,
Iv_msg,
lv_err_buf，
lv_msg_name,
ln_ret_err_code);
tmp_line_tax_

RAISE PROC_ERROR;
END;
END;


PROCEDURE xxap_iata_validate_intf_tabs_P(LV_ERR_BUF IN OUT VARCHAR,
LN_RET_CODE OUT NUMBER,
P_DATAFILE IN XXIF_AUDIT_FILES_ALL._FILENAME%TYPE,,
P_DATECREATED IN XXIF_AUDIT_FILES_CREATION_DATE%TYPE,
DEBUG IN CHAR DEFAULI 'N',
P_ SOURCE IN VARCHAR2) IS
P_USER_ID AP_INVOICES INTERFACE.CREATED_ BY%TYPE;
ERRBUFF_ VARCHAR2(1000) ;
DUMMY_ST_CODE NUMBER;
V_VEN_ROW_ID XXIF_VERSEQ_USES.VEN_ROW_ ID%TYPE;
V_INV_ROW_ID XXIE_AP_STD_INVS_ALL.INV_ROW ID%TYPE;
V_ GROUP AP_INVOICES_INTEREACE.GROUP_ ID%TYPE;

V_ACCPER NUMBER;
P_ERR_MESSAGE VARCHAR2(2000);
ERRCOD_ VARCHAR2(40) ;
V_AUN XXIF_VERSEQ_USES.AUN%TYPE;
V_INVOICE_TYPE_AP_INVOICES_INTERFACE.INVOICE_TYPE_LOOKUP_CODE%TYPE;
L_RET_CODE NUMBER;
L_GRP_SEQ_ID NUMBER;
PROC_ERROR EXCEPTION;
BREAK_LOOP EXCEPTION;
NO_VALIDATION EXCEPTION;
LOCKED_RECORDS_EXC EXCEPTION;

V_INV_LINE_ROW_ID NUMBER;
V_INV_LINE_TAX NUMBER;
VLINE_ NUMBER NUMBER;
V_LINE_NUMBER_TAX NUMBER;
V_LINE_GROUP_NUMBER NUMBER;
V__SUPPLIER_STATION CODE VARCHAR2(150);

GROUP

V_DESCRIPTION_TAX XXIF_AP_STD_INV_LINES_ALL.DESCRIPTION%TYPE;
PRAGMA EXCEPTION_INIT(LOCKED_RECORDS_EXC, -00054);
L_PO_HEADER_ID VARCHAR2(3000);
L_PO_LINE_ ID VARCHAR2 (3000);
V_PO_ NUMBER XXIF_AP_STD_IN_LINES_ALL.PO_NUMBER%TYPE;
V_PO_LINE_NUMBER AP_INVOICE_LINES_INTERFACE.PO_LINE_NUMBER%TYPE;
V AMOUNT NUMBER;
V_TAX_RATE NUMBER;

CURSOR C_ADD_APVEN IS
SELECT DISTINCT VEN_ROW_ID,
V.VEN_USED, NVL(CANCEL, 'N') CANCEL, APPROVAL,
NVL (STATUS_CODE, 0) STATUS_CODE
FROM XXIF_VERSEQ_USES_ALL V
WHERE CREATION_DATE = P_DATECREATED
AND FILENAME = P DATAFILE
AND VEN_ROW_ID IN (SELECT VEN_ROW_ID
FROM XXIF_AP_SID_INVS_ALL_IH
WHERE IH.VEN_ROW_ID = V.VEN_ROW_ID
)
ORDER BY VEN_ROW_ID;

V ADD_APVEN_REC C_ADD_ APVEN%ROWIYPE;

CURSOR C_ADD_APINV IS
SELECT *
FROM XXIF_AP_STD_INVS_ALL
WHERE CANCEL = 'N'
AND (STATUS_CODE IS NULL)
AND VEN_ROW_ID = V_VEN_ROW_ID;
-- for update of XXIF_AP_STD_INVS_ALL. status_code nowait;
--Getting the lines which are matching the PO number V ADD_APINV_REC C_ADD_APINV%ROWTYPE;
CURSOR C_ADD_ACCS IS
SELECT IL.INV_LINE_ROW_ID, 
IL.ACC_AMT AMOUNT, 
IL.ACC_LINE_TYPE,
TRIM(IL.DESCRIPTION) DESCRIPTION, 
IL.UNIT_PRICE, IL.QUANTITY, IL.PO_NUMBER, IL.PO_LINE_NUMBER, IL.TAX_CODE, IL.TAX_RATE, IL.TAX_AMOUNT, IL.LINE_NUMBER, IL.LINE_GROUP_NUMBER, IL.UOM,
IL.VENDOR_ITEM_ NUM, IL.DIST_CODE_COMBINATION_ID, IL.DIST_CODE_CONCATENATED, IL.COA_APPROVER, IL._SAS_SHIPTO_VAT_REG_NO, IL._SAS_SHIPTO_COUNTRY,
IL.SUPPLIER_COUNTRY,
IL.ATTRIBUTE1 CHARGE_CODE, 
IL.ATTRIBUTE2 STATION_CODE, 
IL.ATTRIBUTE3 CHARGE_CODE_TYPE, 
IL.ATTRIBUTE4 START_ DATE,
IL.ATTRIBUTES5 AIRCRAFT_TYPE_CODE,
IL.ATTRIBUTE6 END_DATE
FROM XXIF_AP_STD_INV_LINES_ALL IL
WHERE INV_ROW_ID = V_INV_ROW_ID
AND 'ITEM' = IL.ACC_LINE_TYPE
AND NVL(IL.ACC_AMT, 0) <> 0;

ADD_ACCS_REC C_ADD_ACCS%ROWTYPE;
- - Added as a part of v1.14
CURSOR C_ADD_ACCS_ZERO IS
SELECT
IL.INV_LINE_ROW_ID, IL.ACC_AMT AMOUNT, L.ACC_LINE_TYPE,
TRIM(IL.DESCRIPTION) DESCRIPTION, 
IL.UNIT_PRICE, 
IL.QUANTITY,
IL.PO_NUMBER, 
IL.PO_LINE_NUMBER, 
IL.TAX_CODE, 
IL.TAX_RATE,
IL.TAX_AMOUNT, 
IL.LINE_NUMBER, 
IL.LINE_GROUP_NUMBER, 
IL.UOM,
IL.VENDOR_ITEM NUM,
IL.DIST_CODE_COMBINATION_ID, 
IL.DIST_CODE_CONCATENATED, 
IL.COA_APPROVER, 
IL.SAS_SHIPTO_VAT_REG_NO, 
IL.SAS_SHIPTO_COUNTRY, 
IL.SUPPLIER_COUNTRY,
IL.ATTRIBUTE1 CHARGE_CODE,
IL.ATTRIBUTE2 STATION_CODE, 
IL.ATTRIBUTE3 CHARGE_CODE_TYPE,
IL.ATTRIBUTE4 START_DATE,
IL.ATTRIBUTE5 AIRCRAFT_TYPE_CODE,
ATTRIBUTE6 END_DATE
FROM XXIF_AP_STD_INV_LINES_ALL IL, XXIF_AP_STD_INVS_ALL XASIA
WHERE IL.INV_ROW_ID = XASIA.INV_ROW_ ID
AND IL.INV_ROW_ID = V_INV_ROW_ ID
AND 'ITEM' = IL.ACC_LINE_TYPE
AND NVL (XASIA.AMT_INV, 0) = 0
AND NVL (IL.ACC_AMT, 0) = 0;


V_ADD_ACCS_REC_ZERO C_ADD_ACCS_ZERO%ROWTYPE;
-- Ended as a part of v1.14
--Getting the TAX line for the invoice item line matching po_number
CURSOR C_ADD_ACCS_TAX(V_LINE_GROUP_NUMBER NUMBER, V_INV_ROW_ID NUMBER) IS
SELECT
IL.INV_LINE_ROW_ID, IL.ACC_AMT AMOUNT, L.ACC_LINE_TYPE,
TRIM(IL.DESCRIPTION) DESCRIPTION, 
IL.UNIT_PRICE, 
IL.QUANTITY,
IL.PO_NUMBER, 
IL.PO_LINE_NUMBER, 
IL.TAX_CODE, 
IL.TAX_RATE,
IL.TAX_AMOUNT, 
IL.LINE_NUMBER, 
IL.LINE_GROUP_NUMBER, 
IL.UOM,
IL.VENDOR_ITEM NUM,
IL.DIST_CODE_COMBINATION_ID, 
IL.DIST_CODE_CONCATENATED, 
IL.COA_APPROVER, 
IL.SAS_SHIPTO_VAT_REG_NO, 
IL.SAS_SHIPTO_COUNTRY, 
IL.SUPPLIER_COUNTRY,
FROM XXIF_AP_STD_INV_LINES_ALL IL
WHERE IL.ACC_LINE_TYPE = 'TAX'
AND IL.LINE._GROUP_NUMBER = V_LINE_GROUP_NUMBER
AND INV_ROW_ID = V_IN_ROW ID;

V_ADD_ACCS_TAX_REC C_ADD_ACCS_TAX%ROWTYPE;
V_CHECK_CURSOR BOOLEAN;

BEGIN
ERRBUFF := 'In DoValidate';
LN_ERR_TYPE := 0;
LN_RET_CODE : = 0;
LV_OUT := 'DoValidate';
LN_POS := 10;
V_CHECK_CURSOR : = FALSE;


DBMS_OUTPUT.PUT_LINE( 'Inside doValidate');
IF DEBUG_ = 'Y' THEN
LV_MSG : = 'TEST In DoValidate';
LV_MSG_NAME := 'XXIF_WHEN_OTHERS_ERROR'
XXS_ERRLOG_PKG. LOG_ERROR(LV_PCK,
LV_ROUT, 
LN_POS,
LN_ERR_TYPE,
LN_ERR_CODE, LV_MSG,
ERRBUFF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
END IF;

DELIVID_ := P_SOURCE;
SELECT XXIF_ADDICI_GRP_S.NEXTVAL INTO L_GRP_SEQ_ID FROM DUAL;


--Get parametrizations:

BEGIN
LN_ POS := 15;
SELECT ATTRIBUTE2
INTO V_SOURCE
FROM XXIF_DELIVERY_SOURCES
WHERE DELIVID = P_SOURCE;

EXCEPTION
WHEN OTHERS THEN
LN_ERR_CODE: = SQLCODE;
ROLLBACK;
ERRBUFF_ := NVL (ERRBUFF_,
'SQL error' || TO_CHAR(LN_ERR_CODE) ||
* when fetching ATTRIBUTE2 from XXIF_DELIVERY_SOURCES with delivid' ||
P_SOURCE || '!'):

In_err_ type := 2;
lv_msg := 'OPER=SELECT, TABLE =XXIF_DELIVERY_SOURCES';
Iv_msg_name :- 'FAILURE' || SQLERRM;
ERRORCODE := SQLCODE;
INSERT INTO XXAP_PAGERO_ERROR_LOG_T
(INVOICE_NUM, 
ERROR_TEXT, 
ERROR_CODE, 
STEP- ID, 
CREATION DATE) 
VALUES
(G_INV_NUM, 
P_ERR_MESSAGE, 
ERRCODE_,
LN_ERR_TYPE || LV_MSG_NAME || LV_MSG,
SYSDATE) ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN POS,
IN ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN _RET_ERR_CODE);
COMMIT;
END;

--Read all records in the temp table, that contains the relevant data
IF SUBSTR(P_DATAFILE, 1, 2) = MX' OR SUBSTR(P_DATAFILE, 1, 4) = 'D-MX' THEN 
BEGIN
V_AUN := ' a1';
FOR V_ADD_APVEN_REC IN C_ADD_APVEN LOOP
BEGIN
-- DBMS_OUTPUT. PUT_LINE ('Inside V_Add_apven_rec loop');
-- Get right year for creation of batchname
BEGIN
LN_POS := 25;

V_VEN_ROW_ID := V_ADD_APVEN_REC.VEN_ROW_ID;

LN_POS : = 35;
SELECT ACCER
INTO V_ACCPER

FROM XXIF_AUDIT_FILES_ALL
WHERE FILENAME = P DATAFILE
AND TRUNC(CREATION DATE) = TRUNC(P_DATECREATED) ;
EXCEPTION
WHEN OTHERS THEN
LN_ERR_CODE: = SQLCODE;
ROLLBACK;
ERRBUFF_ := NVL (ERRBUFF_,
'SQL error: || TO_CHAR(LN_ERR_CODE) ||
selecting from XXIF_VERSEQ_USES with VEN_ROW_ID' || TO_CHAR(V_VEN_ROW_ID) || '!');
In_err_ type := 2;
lv_msg := 'OPER=SELECT, TABLE =XXIF_AUDIT_FILES';
Iv_msg_name :- 'XXIF_WHEN_OTHERS_ERROR;
P_ERROR_MESSAGE := 'FAILURE' || SQLERRM;
ERRORCODE := SQLCODE;
INSERT INTO XXAP_PAGERO_ERROR_LOG_T
(INVOICE_NUM, 
ERROR_TEXT, 
ERROR_CODE, 
STEP- ID, 
CREATION DATE) 
VALUES
(G_INV_NUM, 
P_ERR_MESSAGE, 
ERRCODE_,
LN_ERR_TYPE || LV_MSG_NAME || LV_MSG,
SYSDATE) ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN POS,
IN ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN _RET_ERR_CODE);
COMMIT;
END;


if SUBSTR(P_DATAFILE, 1, 2) - 'MX' then 
V_GROUP := SUBSTRP_DATAFILE, 1, 2) ||
SUBSTR(TO_CHAR(V_ACCPER), 3, 2) ||
SUBSTRP_DATAFILE, 5, 4)L_GRP_SEQ_ID;
elsif SUBSTR(P_DATAFILE, 1, 4) = 'D-MX' then
V_GROUP : = SUBSTR(P_DATAFILE, 1, 2) ||
			SUBSTR(TO_CHAR (V_ACCPER), 3, 2) ||
			SUBSTR(P_DATAFILE, 7, 4) || L_GRP_SEQ_ID;
end if;

FOR VLADD_APINV_REC IN C_ADD_APINV LOOP
BEGIN
LN_POS := 50;
INV_ROW_ID := V_ADD_APINV_REC.INV_ROW_ID;
L_RET_CODE = 8;

BEGIN
LN POS := 80;
V_INVOICE_ID := VLADD__APINV_REC.INV_ROW_ID;
END;


-- Do the insert into AP_INVOICES_INTERFACE
BEGIN
BEGIN
V_VAT_COUNTRY_CODE : = NULL;
SELECT VAT_COUNTRY_CODE
INTO V_VAT_COUNTRY_CODE FROM FINANCIALS_SYSTEM_PARAMS_ALL
WHERE ORG_ID = V_ADD_APINV_REC.ORG_ID;
EXCEPTION
WHEN OTHERS THEN
P_ERR_MESSAGE := 'FAILURE' || SQLERRM;
ERRCODE_ := SQLCODE;
INSERT INTO XXAP_PAGERO_ERROR_LOG_T
(INVOICE_NUM, 
ERROR_TEXT,
ERROR_CODE, 
STEP_ID, 
CREATION DATE)
VALUES
(G_INV_NUM,
P_ERR_MESSAGE, 
ERRCODE_,
'Error in inserting the Taxation country', SYSDATE) ;
END;

BEGIN
V_OPERATING_UNIT_NAME : = NULL;
 SELECT NAME
INTO V_OPERATING_UNIT_NAME
FROM HR_OPERATING_UNITS
WHERE ORGANIZATION_ID = V_ADD_APINV_REC.ORG_ID;
EXCEPTION
WHEN OTHERS THEN
P_ERR_MESSAGE := 'FAILURE' || SQLERRM;
ERRCODE_ := SQLCODE;
INSERT INTO XXAP_PAGERO_ERROR_LOG_T
(INVOICE_NUM, 
ERROR_TEXT,
ERROR_CODE, 
STEP_ID, 
CREATION DATE)
VALUES
(G_INV_NUM,
P_ERR_MESSAGE, 
ERRCODE_,
'Error in inserting the operating unit', SYSDATE) ;
END;

LN_POS : = 110;
IF V_ADD_APINV_REC.ATTRIBUTE5 = 'B', THEN
INSERT INTO AP_INVOICES_INTERFACE
(INVOICE_ID, 
INVOICE_NUM, 
INVOICE_TYPE_LOOKUP_CODE, 
INVOICE_DATE, 
PO_NUMBER, 
VENDOR_ID, 
VENDOR NUM.
VENDOR_ID, 
VENDOR_NUM, 
VENDOR_NAME, 
VENDOR_SITE_ID, 
VENDOR_SITE_CODE, 
INVOICE_AMOUNT, 
INVOICE_CURRENCY_CODE, 
EXCHANGE_RATE, 
EXCHANGE_RATE_TYPE, 
EXCHANGE_DATE, 
TERMS_ID, 
TERMS_NAME, 
DESCRIPTION, 
AWT_GROUP_ID,
AWT_GROUP_NAME, 
LAST_UPDATE_DATE, 
LAST_UPDATED_BY, 
LAST_UPDATE_LOGIN, 
CREATION_DATE, 
CREATED_BY, 
ATTRIBUTE_CATEGORY, 
ATTRIBUTE1, 
ATTRIBUTEZ, 
ATTRIBUTE3, 
ATTRIBUTE4, 
AlTRIBUTE5, 
ATTRIBUTE6, 
ATTRIBUTE7, 
ATTRIBUTE8, 
ATTRIBUTE9, 
ATTRIBUTE10, 
ATTRIBUTE11, 
ATTRIBUTE12, 
ATTRIBUTE13, 
ATTRIBUTE14, 
ATTRIBUTE15,
GLOBAL_ATTRIBUTE_CATEGORY,
GLOBAL_ATTRIBUTE1,
GLOBAL_ATTRIBUTE2,
GLOBAL_ATTRIBUTE3,
GLOBAL_ATTRIBUTE4,
GLOBAL_ATTRIBUTE5,
GLOBAL_ATTRIBUTE6,
GLOBAL_ATTRIBUTE7,
GLOBAL_ATTRIBUTE8,
GLOBAL_ATTRIBUTE9,
GLOBAL_ATTRIBUTE10,
GLOBAL_ATTRIBUTE11,
GLOBAL_ATTRIBUTE12,
GLOBAL_ATTRIBUTE13,
GLOBAL_ATTRIBUTE14,
GLOBAL_ATTRIBUTE15,
GLOBAL_ATTRIBUTE16,
GLOBAL_ATTRIBUTE17,
GLOBAL_ATTRIBUTE18,
GLOBAL_ATTRIBUTE19,
GLOBAL_ATTRIBUTE20,
STATUS, 
SOURCE, 
GROUP_ID, 
REQUEST_ID, 
DOC_CATEGORY_CODE, 
VOUCHER_NUM, 
PAYMENT_METHOD_LOOKUP_CODE,
PAY_GROUP_LOOKUP_CODE,
GOODS_RECEIVED_DATE,
INVOICE_RECEIVED_DATE, 
WORKFLOW_FLAG, 
GL_DATE, 
ACCTS_PAY_CODE_COMBINATION_ID, 
USSGL_TRANSACTION_CODE,
EXCLUSIVE_PAYMENT_FLAG, 
ORG_ID,
AMOUNT_APPLICABLE_TO_DISCOUNT, 
PAYMENT_CROSS_RATE_TYPE, 
PAYMENT_CROSS_RATE_DATE, 
PAYMENT_CROSS_RATE, 
PAYMENT_CURRENCY_CODE, 
PREPAY_NUM, 
PREPAY_DIST_NUM, 
PREPAY_APPLY_AMOUNT, 
PREPAY_GL_DATE, 
REQUESTER_EMPLOYEE_NUM, 
OPERATING_UNIT, 
TAXATION_COUNTRY )
VALUES
(V_ADD_APINV_REC.INV_ROW_ID,  
V_ADD_APINV_REC.INV_NO, 
decode (V_ADD_APINV_REC.INV_category,
1,
"STANDARD',
2, 
'CREDIT' 
NULL),

/*NVL (*/
V_ADD_APINV_REC.ISS_DATE /*, trunc(sysdate)) */, -- INVOICE_
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
round (V_ADD_APINV_REC.AMT_INV, 2),
-- rounding it to avoid precision error
V_ADD_APINV_REC.CCD, 

NULL, - -EXCHANGE_RATE
'Corporate', 
SYSDATE, 
NULL,
NULL,
NULL,
NULL,
NULL,
SYSDATE,

FND_PROFILE.VALUE ('USER_ID'),
FND_PROFILE.VALUE ('LOGIN _ID'), 
SYSDATE,


FND_PROFILE.VALUE('USER_ID' 
V_ADD_APINV_REC.SOURCE,
NULL,
NULL,
V_ADD_APINV_REC.attribute5, 

NULL, - 
V_ADD_APINV_REC.KID_NO, 
NULL,
V_ADD_APINV_REC.ATTRIBUTE1,
V_ADD_APINV_REC.ATTRIBUTE3,
NULL,

V_ADD_APIN_REC.INV_Image,
V_ADD_APINV_REC.ATTRIBUTE4, 
V_ADD_APINV_REC.SAS_SHIPTO_COUNTRY, 
V_ADD_APINV_REC.SAS_SHIPTO_VAT_REG_NO,
V_ADD_APINV_REC.VAT_AMT, 
V_ADD_APINV_REC.ATTRIBUTE6,
NULL,
NULL,
NULL,
NULL,NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,

V_ADD_APINV_REC.BANK_ACCOUNT, 
V_ADD_APINV_REC.ORG_NO,
V_ADD_APINV_REC.DUNS_NUMBER,  
TO_CHAR (V_ADD_APINV_REC.DUE_DATE, DD-MON-YYYY'), 
------ATTRIBUTE 7 AND REMOVE ONE NULL
NULL, 
NULL, 
NULL, 
•NOT VALIDATED',
V_ADD_APINV_REC.SOURCE, 
V_GROUP, 
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
V_ADD_APINV_REC.SCANNING_DATE, 
NULL,
NULL,
NULL,
NULL,
NULL,
V_ADD_APINV_REC.ORG_ID;
NULL,
NULL,
NULL,
NULL,NULL,
NULL,
NULL,NULL,
NULL,
V_ADD_APINV_REC.USER_CODE,
V_OPERATING_UNIT_NAME, 
V_VAT_COUNTRY_CODE) ;
ELSE 
 INSERT INTO AP_INVOICES_INTERFACE
 (INVOICE_ID, 
INVOICE_NUM, 
INVOICE_TYPE_LOOKUP_CODE, 
INVOICE_DATE, 
PO_NUMBER, 
VENDOR_ID, 
VENDOR NUM.
VENDOR_ID, 
VENDOR_NUM, 
VENDOR_NAME, 
VENDOR_SITE_ID, 
VENDOR_SITE_CODE, 
INVOICE_AMOUNT, 
INVOICE_CURRENCY_CODE, 
EXCHANGE_RATE, 
EXCHANGE_RATE_TYPE, 
EXCHANGE_DATE, 
TERMS_ID, 
TERMS_NAME, 
DESCRIPTION, 
AWT_GROUP_ID,
AWT_GROUP_NAME, 
LAST_UPDATE_DATE, 
LAST_UPDATED_BY, 
LAST_UPDATE_LOGIN, 
CREATION_DATE, 
CREATED_BY, 
ATTRIBUTE_CATEGORY, 
ATTRIBUTE1, 
ATTRIBUTEZ, 
ATTRIBUTE3, 
ATTRIBUTE4, 
AlTRIBUTE5, 
ATTRIBUTE6, 
ATTRIBUTE7, 
ATTRIBUTE8, 
ATTRIBUTE9, 
ATTRIBUTE10, 
ATTRIBUTE11, 
ATTRIBUTE12, 
ATTRIBUTE13, 
ATTRIBUTE14, 
ATTRIBUTE15,
GLOBAL_ATTRIBUTE_CATEGORY,
GLOBAL_ATTRIBUTE1,
GLOBAL_ATTRIBUTE2,
GLOBAL_ATTRIBUTE3,
GLOBAL_ATTRIBUTE4,
GLOBAL_ATTRIBUTE5,
GLOBAL_ATTRIBUTE6,
GLOBAL_ATTRIBUTE7,
GLOBAL_ATTRIBUTE8,
GLOBAL_ATTRIBUTE9,
GLOBAL_ATTRIBUTE10,
GLOBAL_ATTRIBUTE11,
GLOBAL_ATTRIBUTE12,
GLOBAL_ATTRIBUTE13,
GLOBAL_ATTRIBUTE14,
GLOBAL_ATTRIBUTE15,
GLOBAL_ATTRIBUTE16,
GLOBAL_ATTRIBUTE17,
GLOBAL_ATTRIBUTE18,
GLOBAL_ATTRIBUTE19,
GLOBAL_ATTRIBUTE20,
STATUS, 
SOURCE, 
GROUP_ID, 
REQUEST_ID, 
DOC_CATEGORY_CODE, 
VOUCHER_NUM, 
PAYMENT_METHOD_LOOKUP_CODE,
PAY_GROUP_LOOKUP_CODE,
GOODS_RECEIVED_DATE,
INVOICE_RECEIVED_DATE, 
WORKFLOW_FLAG, 
GL_DATE, 
ACCTS_PAY_CODE_COMBINATION_ID, 
USSGL_TRANSACTION_CODE,
EXCLUSIVE_PAYMENT_FLAG, 
ORG_ID,
AMOUNT_APPLICABLE_TO_DISCOUNT, 
PAYMENT_CROSS_RATE_TYPE, 
PAYMENT_CROSS_RATE_DATE, 
PAYMENT_CROSS_RATE, 
PAYMENT_CURRENCY_CODE, 
PREPAY_NUM, 
PREPAY_DIST_NUM, 
PREPAY_APPLY_AMOUNT, 
PREPAY_GL_DATE, 
REQUESTER_EMPLOYEE_NUM, 
OPERATING_UNIT, 
TAXATION_COUNTRY )
VALUES
(V_ADD_APINV_REC.INV_ROW_ID,  
V_ADD_APINV_REC.INV_NO, 
decode (V_ADD_APINV_REC.INV_category,
1,
"STANDARD',
2, 
'CREDIT' 
NULL),

/*NVL (*/
V_ADD_APINV_REC.ISS_DATE /*, trunc(sysdate)) */, -- INVOICE_
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
round (V_ADD_APINV_REC.AMT_INV, 2),
-- rounding it to avoid precision error
V_ADD_APINV_REC.CCD, 

NULL, - -EXCHANGE_RATE
'Corporate', 
SYSDATE, 
NULL,
NULL,
NULL,
NULL,
NULL,
SYSDATE,

FND_PROFILE.VALUE ('USER_ID'),
FND_PROFILE.VALUE ('LOGIN _ID'), 
SYSDATE,


FND_PROFILE.VALUE('USER_ID' 
V_ADD_APINV_REC.SOURCE,
NULL,
NULL,
V_ADD_APINV_REC.attribute5, 

NULL, - 
V_ADD_APINV_REC.KID_NO, 
NULL,
V_ADD_APINV_REC.ATTRIBUTE1,
V_ADD_APINV_REC.ATTRIBUTE3,
NULL,

V_ADD_APIN_REC.INV_Image,
V_ADD_APINV_REC.ATTRIBUTE4, 
V_ADD_APINV_REC.SAS_SHIPTO_COUNTRY, 
V_ADD_APINV_REC.SAS_SHIPTO_VAT_REG_NO,
V_ADD_APINV_REC.VAT_AMT, 
V_ADD_APINV_REC.ATTRIBUTE6,
NULL,
NULL,
NULL,
NULL,NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,

V_ADD_APINV_REC.BANK_ACCOUNT, 
V_ADD_APINV_REC.ORG_NO,
V_ADD_APINV_REC.DUNS_NUMBER,  
TO_CHAR (V_ADD_APINV_REC.DUE_DATE, DD-MON-YYYY'), 
V_ADD_APINV_REC.ATTRIBUTE7,
NULL, 
NULL, 
•NOT VALIDATED',
V_ADD_APINV_REC.SOURCE, 
V_GROUP, 
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
V_ADD_APINV_REC.SCANNING_DATE, 
NULL,
NULL,
NULL,
NULL,
NULL,
V_ADD_APINV_REC.ORG_ID;
NULL,
NULL,
NULL,
NULL,NULL,
NULL,
NULL,NULL,
NULL,
V_ADD_APINV_REC.USER_CODE,
V_OPERATING_UNIT_NAME, 
V_VAT_COUNTRY_CODE) ;
END IF;
 
EXCEPTION
WHEN OTHERS THEN
LN_ERR_CODE: = SQLCODE;
ROLLBACK;
ERRBUFF_ := NVL (ERRBUFF_,
'SQL error' || TO_CHAR(LN_ERR_CODE) ||
'inserting into AP_INVOICES_INTERFACE!' );

In_err_ type := 2;
lv_msg := 'OPER=SELECT, TABLE =AP_INVOICES_INTERFACE';
Iv_msg_name :- 'FAILURE' || SQLERRM;
ERRORCODE := SQLCODE;
INSERT INTO XXAP_PAGERO_ERROR_LOG_T
(INVOICE_NUM, 
ERROR_TEXT, 
ERROR_CODE, 
STEP- ID, 
CREATION DATE) 
VALUES
(G_INV_NUM, 
P_ERR_MESSAGE, 
ERRCODE_,
LN_ERR_TYPE || LV_MSG_NAME || LV_MSG,
SYSDATE) ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN POS,
IN ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN _RET_ERR_CODE);
COMMIT;
END;
 

FOR V_ADD_ACCS_REC_ZERO IN C_ADD_ACCS_ZERO LOOP
begin
INSERT INTO AP_INVOICE_LINES_INTERFACE
(INVOICE_ ID, 
INVOICE_ LINE_ID, 
LINE_NUMBER, 
LINE_TYPE_LOOKUP_CODE,
LINE_GROUP_NUMBER,
AMOUNT, 
ACCOUNTING_DATE, 
DESCRIPTION, 
AMOUNT_INCLUDES_TAX_FLAG, 
PRORATE_ACROSS_FLAG, 
TAX_CODE, 
FINAL_MATCH_FLAG, 
PO_HEADER_ID,
PO_NUMBER,
PO_LINE_ID, 
PO_LINE_NUMBER, 
PO_LINE _LOCATION ID,
PO_SHIPMENT_NUM, 
PO_DISTRIBUTION_ID, 
PO_DISTRIBUTIO_NUM,
PO_UNIT_OF MEASURE,
INVENTORY_ITEM_ID,
ITEM_DESCRIPTION, 
QUANTITY_INVOICED, 
SHIP_TO_LOCATION_CODE, UNIT_PRICE,
DISTRIBUTION_SET_ID, 
DISTRIBUTION_SET_NAME, 
DIST_CODE_CONCATENATED, 
DIST_CODE_COMBINATION_ID,
AWT_GROUP_ID, 
AWT_GROUP_NAME,
LAST_UPDATED_BY, 
LAST_UPDATE_DATE,
LAST_UPDATE_LOGIN, 
CREATED_BY, 
CREATION_DATE, 
ATTRIBUTE_CATEGORY, 
ATTRIBUTE1, 
ATTRIBUTE2,
ATTRIBUTE3, 
ATTRIBUTE4, 
ATTRIBUTE5, 
ATTRIBUTE6, 
ATTRIBUTE7, 
ATTRIBUTE8, 
ATTRIBUTE9, 
ATTRIBUTE10, 
ATTRIBUTE11, 
ATTRIBUTE12, 
ATTRIBUTE13, 
ATTRIBUTE14, 
AlTRIBUTE15,
GLOBAL_ATTRIBUTE_CATEGORY, 
GLOBAL_ATTRIBUTE1, 
GLOBAL_ATTRIBUTE2, 
GLOBAL_ATTRIBUTE3, 
GLOBAL _ATTRIBUTE4, 
GLOBAL_ATTRIBUTE5, 
GLOBAL_ATTRIBUTEG6, 
GLOBAL _ATTRIBUTEZ, 
GLOBAL_ATTRIBUTE8, 
GLOBAL _ATTRIBUTE9, 
GLOBAL_ATTRIBUTE10, 
GLOBAL_ATTRIBUTE11, 
GLOBAL ATTRIBUTE12,
GLOBAL_ATTRIBUTE13, 
GLOBAL_ATTRIBUTE14, 
GLOBAL_ATTRIBUTE15, 
GLOBAL_ ATTRIBUTE16, 
GLOBAL _ATTRIBUTE17, 
GLOBAL_ATTRIBUTE18, 
GLOBAL_ATTRIBUTE19, 
GLOBAL_ATTRIBUTE20, 
PO_RELEASE_ID,  
RELEASE_NUM, 
BALANCING_SEGMENT, 
COST_CENTER_SEGMENT, 
ACCOUNT_SEGMENT, 
PROJECT_ID, 
TASK_ID, 
EXPENDITURE_TYPE, 
EXPENDITURE_ITEM_DATE, 
EXPENDITURE_ORGANIZATION_ID, 
PROJECT_ACCOUNTING_CONTEXT, 
PA_ADDITION_FLAG, 
PA_QUANTITY, 
USSGL_TRANSACTION_CODE, 
STAT_AMOUNT ,
TYPE_1099,
INCOME_TAX_REGION, 
ASSETS_TRACKING_FLAG, 
PRICE_CORRECTION_-LAG, 
ORG_ID, RECEIPT_NUMBER, 
RECELP_LINE_NUMBER, 
MAICH_OPTION, 
PACKING_SLIP, 
RCV_TRANSACTION_ID, 
PA_CC _AR_INVOICE_ID, 
PA_CC_AR_INVOICE_LINE_NUM,
REFERENCE_1, REFERENCE_2,
PA_CC_PROCESSED_CODE, 
TAX_RECOVERY_RATE, 
TAX_RECOVERY_OVERRIDE_FLAG, 
TAX_RECOVERABLE_FLAG, 
TAX_CODE_OVERRIDE_FLAG, 
TAX_CODE_ID,
TAX_RATE,
CREDIT_CARD__TRX_ID,
AWARD_ID, 
VENDOR_ITEM_NUM)
VALUES
(V_INVOICE_ID, 
V_ADD_ACCS_REC_ZERO.INV_LINE_ROW_ID, 
V_ADD_ACCS_REC_ZERO.LINE_NUMBER, 
V_ADD_ACCS_REC_ZERO.ACC_LINE_TYPE,
V_ADD ACCS_REC_ZERO.LINE_GROUP_NUMBER, 
NVL(V_ADD_ACCS_REC_ZERO.AMOUNT, 0), -
NULL, 
V_Add_accs_rec.Description,
NULL,
DECODE (V_ADD_ACCS_REC_ZERO.ACC_LINE_TYPE,
' TAX',
'Y",
NULL),

V_ADD_ACCS_REC_ZERO.TAX_CODE, 
NULL, 
NULL, NULL, NULL, 
NULL, 
NULL, 
NULL, 
NULL, 
NULL, 

DECODE (V_ADD_ACCS_REC_ZERO.ACC_LINE TYPE,
'ITEM'
V_ADD_ACCS_REC.UOM,
NULL), 
NULL, 
V_ADD_ACCS_REC_ZERO.DESCRIPTION,
DECODE (V_ADD_ACCS_REC_ZERO.ACC_LINE TYPE,
'ITEM'
V_ADD_ACCS_REC_ZERO_QUANTITY,
NULL),
NULL,
DECODE(V_ADD_ACCS_REC_ZERO.ACC_LINE_TYPE,
'ITEM'
V_ADD_ACCS_REC_ZERO.UNIT_PRICE, 
NULL), 
NULL,
NULL,
NULL, 

V_ADD_ACCS_REC_ZERO.DIST_CODE_COMBINATION_ID,

NULL,
NULL,
FND_PROFILE.VALUE ('USER_ID'),
SYSDATE,
FND_PROFILE.VALUE(' LOGIN_ID"),
FND_PROFILE.VALUE('USER_ID'),
SYSDATE,
V_ADD_APINV_REC.SOURCE, 
V_ADD_ACCS_REC._ZERO.COA_APPROVER,
NULL,
NULL, 
V_SUPPLIER_STATION_CODE, 
NULL, 
NULL, 
NULL,

V_ADD_ACCS_REC_ZERO.Charge_Code_Type,

V_ADD_ACCS_REC_ZERO. Charge_Code, 
NULL, 
NULL,
V_ADD_ACCS_REC_ZERO.SAS_SHIPTO_COUNTRY,
NULL, 

V_ADD_ACCS_REC_ZERO.START_DATE, --NULL, 
V_ADD_ACCS_REC_ZERO.AIRCRAFT_TYPE_CODE, 
NULL, V_ADD_ACCS_REC_ZERO.END_DATE,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,

 
V_ADD_APINV_REC.ORG_ID,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,

DECODE (V_ADD_ACCS_REC_ZERO.ACC_LINE_TYPE,
'ITEM' 
NULL,
V_TAX_RATE)
NULL,
NULL,
DECODE (V_ADD_ACCS_REC_ZERO.ACC_LINE_TYPE,
'ITEM'
NULL,
V_ADD_ACCS_REC_ZERO.VENDOR_ITEM_NUM)
);
EXCEPTION
WHEN OTHERS THEN
LN_ERR_CODE: = SQLCODE;
ROLLBACK;
ERRBUFF : = NVL (ERRBUFF_,
'SQL error" ||
TO_CHAR(LN-ERR_CODE) ||
'inserting into AP_INVOICE_LINES_INTERFACE FOR 0 AMOUNT!');
LN_ERR_TYPE := 2;
LV_MSG := 'OPER-INSERT, TABLE=AP_INVOICE_LINES_INTERFACE' ;
LV_MSG_NAME := 'XXIF_WHEN_OTHERS_ERROR' ;
P_ERR_MESSAGE := 'FAILURE' || SQLERRM;
ERRCODE_: - SQLCODE;
INSERT INTO XXAP_PAGERO_ERROR_LOG_T
(INVOICE_NUM, 
ERROR_TEXT, 
ERROR_CODE, 
STEP- ID, 
CREATION DATE) 
VALUES
(G_INV_NUM, 
P_ERR_MESSAGE, 
ERRCODE_,
LN_ERR_TYPE || LV_MSG_NAME || LV_MSG,
SYSDATE) ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN POS,
IN ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN _RET_ERR_CODE);
COMMIT;
END;
END LOOP;

-- Ended as a part of v1.14
FOR V_ADD_ACCS_REC IN C_ADD_ACCS LOOP
V_PO_NUMBER := NULL;
V_PO_LINE_NUMBER : = 0;
V_DESCRIPTION_TAX : = NULL;
V_AMOUNT := 0;
V_TAX_RATE := 0;
V_CHECK_CURSOR := TRUE;

IF V_ADD_ACCS_REC. STATION_CODE IS NULL THEN 
BEGIN
V_SUPPLIER_STATION_CODE : = NULL;
SELECT ATTRIBUTE2
INTO V SUPPLIER_STATION_CODE
FROM XXIF_AP_STD_INVS_ALL
WHERE INV_NO = V_ADD_APINV_REC.INV_NO
AND SOURCE = V_ADD_APINV_REC.SOURCE;
EXCEPTION

WHEN OTHERS THEN

P_ERR_MESSAGE := 'FAILURE' || SQLERRM;
ERRCODE_ := SQLCODE;
INSERT INTO XXAP_PAGERO_ERROR_LOG_T
(INVOICE_NUM, 
ERROR_TEXT,
ERROR_CODE, 
STEP_ID, 
CREATION DATE)
VALUES
(G_INV_NUM,
P_ERR_MESSAGE, 
ERRCODE_,
'Error in inserting the Taxation country', SYSDATE) ;
END;

ELSE

V_SUPPLIER_STATION_CODE : = V_ADD_ACCS_REC.STATION_CODE;
END IF;


**********Do the "ITEM" insert into AP_INVOICE_LINES_INTERFACE
BEGIN
LN_POS := 137;
IF V_ADD_APINV_REC.ATTRIBUTES = 'B' THEN

INSERT INTO AP_INVOICE_LINES_INTERFACE
(INVOICE_ ID, 
INVOICE_ LINE_ID, 
LINE_NUMBER, 
LINE_TYPE_LOOKUP_CODE,
LINE_GROUP_NUMBER,
AMOUNT, 
ACCOUNTING_DATE, 
DESCRIPTION, 
AMOUNT_INCLUDES_TAX_FLAG, 
PRORATE_ACROSS_FLAG, 
TAX_CODE, 
FINAL_MATCH_FLAG, 
PO_HEADER_ID,
PO_NUMBER,
PO_LINE_ID, 
PO_LINE_NUMBER, 
PO_LINE _LOCATION ID,
PO_SHIPMENT_NUM, 
PO_DISTRIBUTION_ID, 
PO_DISTRIBUTIO_NUM,
PO_UNIT_OF MEASURE,
INVENTORY_ITEM_ID,
ITEM_DESCRIPTION, 
QUANTITY_INVOICED, 
SHIP_TO_LOCATION_CODE, UNIT_PRICE,
DISTRIBUTION_SET_ID, 
DISTRIBUTION_SET_NAME, 
DIST_CODE_CONCATENATED, 
DIST_CODE_COMBINATION_ID,
AWT_GROUP_ID, 
AWT_GROUP_NAME,
LAST_UPDATED_BY, 
LAST_UPDATE_DATE,
LAST_UPDATE_LOGIN, 
CREATED_BY, 
CREATION_DATE, 
ATTRIBUTE_CATEGORY, 
ATTRIBUTE1, 
ATTRIBUTE2,
ATTRIBUTE3, 
ATTRIBUTE4, 
ATTRIBUTE5, 
ATTRIBUTE6, 
ATTRIBUTE7, 
ATTRIBUTE8, 
ATTRIBUTE9, 
ATTRIBUTE10, 
ATTRIBUTE11, 
ATTRIBUTE12, 
ATTRIBUTE13, 
ATTRIBUTE14, 
AlTRIBUTE15,
GLOBAL_ATTRIBUTE_CATEGORY, 
GLOBAL_ATTRIBUTE1, 
GLOBAL_ATTRIBUTE2, 
GLOBAL_ATTRIBUTE3, 
GLOBAL _ATTRIBUTE4, 
GLOBAL_ATTRIBUTE5, 
GLOBAL_ATTRIBUTEG6, 
GLOBAL _ATTRIBUTEZ, 
GLOBAL_ATTRIBUTE8, 
GLOBAL _ATTRIBUTE9, 
GLOBAL_ATTRIBUTE10, 
GLOBAL_ATTRIBUTE11, 
GLOBAL ATTRIBUTE12,
GLOBAL_ATTRIBUTE13, 
GLOBAL_ATTRIBUTE14, 
GLOBAL_ATTRIBUTE15, 
GLOBAL_ ATTRIBUTE16, 
GLOBAL _ATTRIBUTE17, 
GLOBAL_ATTRIBUTE18, 
GLOBAL_ATTRIBUTE19, 
GLOBAL_ATTRIBUTE20, 
PO_RELEASE_ID,  
RELEASE_NUM, 
BALANCING_SEGMENT, 
COST_CENTER_SEGMENT, 
ACCOUNT_SEGMENT, 
PROJECT_ID, 
TASK_ID, 
EXPENDITURE_TYPE, 
EXPENDITURE_ITEM_DATE, 
EXPENDITURE_ORGANIZATION_ID, 
PROJECT_ACCOUNTING_CONTEXT, 
PA_ADDITION_FLAG, 
PA_QUANTITY, 
USSGL_TRANSACTION_CODE, 
STAT_AMOUNT ,
TYPE_1099,
INCOME_TAX_REGION, 
ASSETS_TRACKING_FLAG, 
PRICE_CORRECTION_-LAG, 
ORG_ID, RECEIPT_NUMBER, 
RECELP_LINE_NUMBER, 
MAICH_OPTION, 
PACKING_SLIP, 
RCV_TRANSACTION_ID, 
PA_CC _AR_INVOICE_ID, 
PA_CC_AR_INVOICE_LINE_NUM,
REFERENCE_1, REFERENCE_2,
PA_CC_PROCESSED_CODE, 
TAX_RECOVERY_RATE, 
TAX_RECOVERY_OVERRIDE_FLAG, 
TAX_RECOVERABLE_FLAG, 
TAX_CODE_OVERRIDE_FLAG, 
TAX_CODE_ID,
TAX_RATE,
CREDIT_CARD__TRX_ID,
AWARD_ID, 
VENDOR_ITEM_NUM)
VALUES
(V_INVOICE_ID, 
V_ADD_ACCS_REC.INV_LINE_ROW_ID, 
V_ADD_ACCS_REC.LINE_NUMBER, 
V_ADD_ACCS_REC.ACC_LINE_TYPE,
V_ADD ACCS_REC.LINE_GROUP_NUMBER, 
NVL(V_ADD_ACCS_REC.AMOUNT, 0), -
NULL, 
V_Add_accs_rec.Description,
NULL,
DECODE (V_ADD_ACCS_REC.ACC_LINE_TYPE,
' TAX',
'Y",
NULL),

V_ADD_ACCS_REC.TAX_CODE, 
NULL, 
NULL, NULL, NULL, 
NULL, 
NULL, 
NULL, 
NULL, 
NULL, 

DECODE (V_ADD_ACCS_REC.ACC_LINE TYPE,
'ITEM'
V_ADD_ACCS_REC.UOM,
NULL), 
NULL, 
V_ADD_ACCS_REC.DESCRIPTION,
DECODE (V_ADD_ACCS_REC.ACC_LINE TYPE,
'ITEM'
V_ADD_ACCS_REC.QUANTITY,
NULL),
NULL,
DECODE(V_ADD_ACCS_REC.ACC_LINE_TYPE,
'ITEM'
V_ADD_ACCS_REC.UNIT_PRICE, 
NULL), 
NULL,
NULL,
NULL, 

V_ADD_ACCS_REC.DIST_CODE_COMBINATION_ID,

NULL,
NULL,
FND_PROFILE.VALUE ('USER_ID'),
SYSDATE,
FND_PROFILE.VALUE(' LOGIN_ID"),
FND_PROFILE.VALUE('USER_ID'),
SYSDATE,
V_ADD_APINV_REC.SOURCE, 
V_ADD_ACCS_REC.COA_APPROVER,
NULL,
NULL, 
V_SUPPLIER_STATION_CODE, 
NULL, 
NULL, 
NULL,

V_ADD_ACCS_REC.Charge_Code_Type,

V_ADD_ACCS_REC.Charge_Code, 
NULL, 
NULL,
V_ADD_ACCS_REC.SAS_SHIPTO_COUNTRY,
NULL, 

V_ADD_ACCS_REC.START_DATE, --NULL, 
V_ADD_ACCS_REC.AIRCRAFT_TYPE_CODE, 
NULL, V_ADD_ACCS_REC.END_DATE,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,

 
V_ADD_APINV_REC.ORG_ID,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,

DECODE (V_ADD_ACCS_REC.ACC_LINE_TYPE,
'ITEM' 
NULL,
V_TAX_RATE)
NULL,
NULL,
DECODE (V_ADD_ACCS_REC.ACC_LINE_TYPE,
'ITEM'
NULL,
V_ADD_ACCS_REC.VENDOR_ITEM_NUM)
);



ELSE 

INSERT INTO AP_INVOICE_LINES_INTERFACE
(INVOICE_ ID, 
INVOICE_ LINE_ID, 
LINE_NUMBER, 
LINE_TYPE_LOOKUP_CODE,
LINE_GROUP_NUMBER,
AMOUNT, 
ACCOUNTING_DATE, 
DESCRIPTION, 
AMOUNT_INCLUDES_TAX_FLAG, 
PRORATE_ACROSS_FLAG, 
TAX_CODE, 
FINAL_MATCH_FLAG, 
PO_HEADER_ID,
PO_NUMBER,
PO_LINE_ID, 
PO_LINE_NUMBER, 
PO_LINE _LOCATION ID,
PO_SHIPMENT_NUM, 
PO_DISTRIBUTION_ID, 
PO_DISTRIBUTIO_NUM,
PO_UNIT_OF MEASURE,
INVENTORY_ITEM_ID,
ITEM_DESCRIPTION, 
QUANTITY_INVOICED, 
SHIP_TO_LOCATION_CODE, UNIT_PRICE,
DISTRIBUTION_SET_ID, 
DISTRIBUTION_SET_NAME, 
DIST_CODE_CONCATENATED, 
DIST_CODE_COMBINATION_ID,
AWT_GROUP_ID, 
AWT_GROUP_NAME,
LAST_UPDATED_BY, 
LAST_UPDATE_DATE,
LAST_UPDATE_LOGIN, 
CREATED_BY, 
CREATION_DATE, 
ATTRIBUTE_CATEGORY, 
ATTRIBUTE1, 
ATTRIBUTE2,
ATTRIBUTE3, 
ATTRIBUTE4, 
ATTRIBUTE5, 
ATTRIBUTE6, 
ATTRIBUTE7, 
ATTRIBUTE8, 
ATTRIBUTE9, 
ATTRIBUTE10, 
ATTRIBUTE11, 
ATTRIBUTE12, 
ATTRIBUTE13, 
ATTRIBUTE14, 
AlTRIBUTE15,
GLOBAL_ATTRIBUTE_CATEGORY, 
GLOBAL_ATTRIBUTE1, 
GLOBAL_ATTRIBUTE2, 
GLOBAL_ATTRIBUTE3, 
GLOBAL _ATTRIBUTE4, 
GLOBAL_ATTRIBUTE5, 
GLOBAL_ATTRIBUTEG6, 
GLOBAL _ATTRIBUTEZ, 
GLOBAL_ATTRIBUTE8, 
GLOBAL _ATTRIBUTE9, 
GLOBAL_ATTRIBUTE10, 
GLOBAL_ATTRIBUTE11, 
GLOBAL ATTRIBUTE12,
GLOBAL_ATTRIBUTE13, 
GLOBAL_ATTRIBUTE14, 
GLOBAL_ATTRIBUTE15, 
GLOBAL_ ATTRIBUTE16, 
GLOBAL _ATTRIBUTE17, 
GLOBAL_ATTRIBUTE18, 
GLOBAL_ATTRIBUTE19, 
GLOBAL_ATTRIBUTE20, 
PO_RELEASE_ID,  
RELEASE_NUM, 
BALANCING_SEGMENT, 
COST_CENTER_SEGMENT, 
ACCOUNT_SEGMENT, 
PROJECT_ID, 
TASK_ID, 
EXPENDITURE_TYPE, 
EXPENDITURE_ITEM_DATE, 
EXPENDITURE_ORGANIZATION_ID, 
PROJECT_ACCOUNTING_CONTEXT, 
PA_ADDITION_FLAG, 
PA_QUANTITY, 
USSGL_TRANSACTION_CODE, 
STAT_AMOUNT ,
TYPE_1099,
INCOME_TAX_REGION, 
ASSETS_TRACKING_FLAG, 
PRICE_CORRECTION_-LAG, 
ORG_ID, RECEIPT_NUMBER, 
RECELP_LINE_NUMBER, 
MAICH_OPTION, 
PACKING_SLIP, 
RCV_TRANSACTION_ID, 
PA_CC _AR_INVOICE_ID, 
PA_CC_AR_INVOICE_LINE_NUM,
REFERENCE_1, REFERENCE_2,
PA_CC_PROCESSED_CODE, 
TAX_RECOVERY_RATE, 
TAX_RECOVERY_OVERRIDE_FLAG, 
TAX_RECOVERABLE_FLAG, 
TAX_CODE_OVERRIDE_FLAG, 
TAX_CODE_ID,
TAX_RATE,
CREDIT_CARD__TRX_ID,
AWARD_ID, 
VENDOR_ITEM_NUM)
VALUES
(V_INVOICE_ID, 
V_ADD_ACCS_REC.INV_LINE_ROW_ID, 
V_ADD_ACCS_REC.LINE_NUMBER, 
V_ADD_ACCS_REC.ACC_LINE_TYPE,
V_ADD ACCS_REC.LINE_GROUP_NUMBER, 
round(NVL(V_ADD_ACCS_REC.AMOUNT, 0), 2),
NULL, 
V_Add_accs_rec.Description,
NULL,
DECODE (V_ADD_ACCS_REC.ACC_LINE_TYPE,
' TAX',
'Y",
NULL),

V_ADD_ACCS_REC.TAX_CODE, 
NULL, 
NULL, NULL, NULL, 
NULL, 
NULL, 
NULL, 
NULL, 
NULL, 

DECODE (V_ADD_ACCS_REC.ACC_LINE TYPE,
'ITEM'
V_ADD_ACCS_REC.UOM,
NULL), 
NULL, 
V_ADD_ACCS_REC.DESCRIPTION,
DECODE (V_ADD_ACCS_REC.ACC_LINE TYPE,
'ITEM'
V_ADD_ACCS_REC.QUANTITY,
NULL),
NULL,
DECODE(V_ADD_ACCS_REC.ACC_LINE_TYPE,
'ITEM'
V_ADD_ACCS_REC.UNIT_PRICE, 
NULL), 
NULL,
NULL,
NULL, 

V_ADD_ACCS_REC.DIST_CODE_COMBINATION_ID,

NULL,
NULL,
FND_PROFILE.VALUE ('USER_ID'),
SYSDATE,
FND_PROFILE.VALUE(' LOGIN_ID"),
FND_PROFILE.VALUE('USER_ID'),
SYSDATE,
V_ADD_APINV_REC.SOURCE, 
V_ADD_ACCS_REC.COA_APPROVER,
NULL,
NULL, 
V_SUPPLIER_STATION_CODE, 
NULL, 
NULL, 
NULL,

V_ADD_ACCS_REC.Charge_Code_Type,

V_ADD_ACCS_REC.Charge_Code, 
NULL, 
NULL,
V_ADD_ACCS_REC.SAS_SHIPTO_COUNTRY,
NULL, 

V_ADD_ACCS_REC.START_DATE, --NULL, 
V_ADD_ACCS_REC.AIRCRAFT_TYPE_CODE, 
NULL, V_ADD_ACCS_REC.END_DATE,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,

 
V_ADD_APINV_REC.ORG_ID,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,

DECODE (V_ADD_ACCS_REC.ACC_LINE_TYPE,
'ITEM' 
NULL,
V_TAX_RATE)
NULL,
NULL,
DECODE (V_ADD_ACCS_REC.ACC_LINE_TYPE,
'ITEM'
NULL,
V_ADD_ACCS_REC.VENDOR_ITEM_NUM)
);


END IF;

EXCEPTION
WHEN OTHERS THEN
LN_ERR_CODE: = SQLCODE;
ROLLBACK;
ERRBUFF_ := NVL (ERRBUFF_,
'SQL error' || TO_CHAR(LN_ERR_CODE) ||
'inserting into AP_INVOICE_LINES_INTERFACE!');

In_err_ type := 2;
lv_msg := 'OPER=SELECT, TABLE =AP_INVOICE_LINES_INTERFACE';
Iv_msg_name :- 'FAILURE' || SQLERRM;
ERRORCODE := SQLCODE;
INSERT INTO XXAP_PAGERO_ERROR_LOG_T
(INVOICE_NUM, 
ERROR_TEXT, 
ERROR_CODE, 
STEP- ID, 
CREATION DATE) 
VALUES
(G_INV_NUM, 
P_ERR_MESSAGE, 
ERRCODE_,
LN_ERR_TYPE || LV_MSG_NAME || LV_MSG,
SYSDATE) ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN POS,
IN ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN _RET_ERR_CODE);
COMMIT;
END;


* FOR V_ADD_ACCS_TAX_REC IN C_ADD_ACCS_TAX(V_ADD_ ACCS_REC.LINE_GROUP_NUMBER,
V_INVOICE_ID) LOOP
IF V_ADD_ACCS_TAX_REC.ACC_LINE_TYPE = 'TAX' THEN
BEGIN
SELECT ACC_AMT
INTO V_AMOUNT FROM XXIF _AP._STD_INV_LINES ALL
WHERE INV_ROW_ID = V_INVOICE_ID
AND INV_LINE_ ROW ID =
V_ADD_ACCS_TAX_REC.LINE_GROUP_NUMBER;
EXCEPTION
WHEN OTHERS THEN
LN_ERR_CODE: = SQLCODE;
ROLLBACK;
ERRBUFF_ := NVL (ERRBUFF_,
'SQL error' || TO_CHAR(LN_ERR_CODE) ||
'inserting into AP_INVOICE_LINES_INTERFACE!');

In_err_ type := 2;
lv_msg := 'OPER=SELECT, TABLE =AP_INVOICE_LINES_INTERFACE';
Iv_msg_name :- 'FAILURE' || SQLERRM;
ERRORCODE := SQLCODE;
INSERT INTO XXAP_PAGERO_ERROR_LOG_T
(INVOICE_NUM, 
ERROR_TEXT, 
ERROR_CODE, 
STEP- ID, 
CREATION DATE) 
VALUES
(G_INV_NUM, 
P_ERR_MESSAGE, 
ERRCODE_,
LN_ERR_TYPE || LV_MSG_NAME || LV_MSG,
SYSDATE) ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN POS,
IN ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN _RET_ERR_CODE);
END;

IF NVL (V_AMOUNT, 0) <> 0 THEN
--- To stop failing of tax only invoices
IF ABS(ROUND(V_ADD_ACCS_TAX_REC-AMOUNT, 2) -
ROUND ((NVL(V_AMOUNT, 0) *
NVL (V_ADD_ACCS_TAX_REC.TAX_RATE, 0)) / 100,
2)) > 0.1 THEN
V_DESCRIPTION_TAX := 'Tax amount does not match the Tax rate and the original line amount';
V TAX RATE := ROUND((V_ADD_ACCS_TAX_REC. AMOUNT / V_AMOUNT) * 100,
2) ;
ELSE
V_DESCRIPTION_TAX := 'IATA';
V_TAX_RATE := V_ADD_ACCS_TAX_REC.TAX_RATE;
END IF;
ELSE
V_DESCRIPTION_TAX : = 'IATA';
V_TAX_RATE := V_ADD_ACCS_TAX_REC.TAX_RATE;
END IF;
ELSE
V_DESCRIPTION_TAX : = V_ADD_ACCS_REC.DESCRIPTION;
V_TAX_RATE := V_ADD_ACCS _REC.TAX_RATE;
END IF;
BEGIN
INSERT INTO AP_INVOICE_LINES_INTERFACE
(INVOICE_ ID, 
INVOICE_ LINE_ID, 
LINE_NUMBER, 
LINE_TYPE_LOOKUP_CODE,
LINE_GROUP_NUMBER,
AMOUNT, 
ACCOUNTING_DATE, 
DESCRIPTION, 
AMOUNT_INCLUDES_TAX_FLAG, 
PRORATE_ACROSS_FLAG, 
TAX_CODE, 
FINAL_MATCH_FLAG, 
PO_HEADER_ID,
PO_NUMBER,
PO_LINE_ID, 
PO_LINE_NUMBER, 
PO_LINE _LOCATION ID,
PO_SHIPMENT_NUM, 
PO_DISTRIBUTION_ID, 
PO_DISTRIBUTIO_NUM,
PO_UNIT_OF MEASURE,
INVENTORY_ITEM_ID,
ITEM_DESCRIPTION, 
QUANTITY_INVOICED, 
SHIP_TO_LOCATION_CODE, UNIT_PRICE,
DISTRIBUTION_SET_ID, 
DISTRIBUTION_SET_NAME, 
DIST_CODE_CONCATENATED, 
DIST_CODE_COMBINATION_ID,
AWT_GROUP_ID, 
AWT_GROUP_NAME,
LAST_UPDATED_BY, 
LAST_UPDATE_DATE,
LAST_UPDATE_LOGIN, 
CREATED_BY, 
CREATION_DATE, 
ATTRIBUTE_CATEGORY, 
ATTRIBUTE1, 
ATTRIBUTE2,
ATTRIBUTE3, 
ATTRIBUTE4, 
ATTRIBUTE5, 
ATTRIBUTE6, 
ATTRIBUTE7, 
ATTRIBUTE8, 
ATTRIBUTE9, 
ATTRIBUTE10, 
ATTRIBUTE11, 
ATTRIBUTE12, 
ATTRIBUTE13, 
ATTRIBUTE14, 
AlTRIBUTE15,
GLOBAL_ATTRIBUTE_CATEGORY, 
GLOBAL_ATTRIBUTE1, 
GLOBAL_ATTRIBUTE2, 
GLOBAL_ATTRIBUTE3, 
GLOBAL _ATTRIBUTE4, 
GLOBAL_ATTRIBUTE5, 
GLOBAL_ATTRIBUTEG6, 
GLOBAL _ATTRIBUTEZ, 
GLOBAL_ATTRIBUTE8, 
GLOBAL _ATTRIBUTE9, 
GLOBAL_ATTRIBUTE10, 
GLOBAL_ATTRIBUTE11, 
GLOBAL ATTRIBUTE12,
GLOBAL_ATTRIBUTE13, 
GLOBAL_ATTRIBUTE14, 
GLOBAL_ATTRIBUTE15, 
GLOBAL_ ATTRIBUTE16, 
GLOBAL _ATTRIBUTE17, 
GLOBAL_ATTRIBUTE18, 
GLOBAL_ATTRIBUTE19, 
GLOBAL_ATTRIBUTE20, 
PO_RELEASE_ID,  
RELEASE_NUM, 
BALANCING_SEGMENT, 
COST_CENTER_SEGMENT, 
ACCOUNT_SEGMENT, 
PROJECT_ID, 
TASK_ID, 
EXPENDITURE_TYPE, 
EXPENDITURE_ITEM_DATE, 
EXPENDITURE_ORGANIZATION_ID, 
PROJECT_ACCOUNTING_CONTEXT, 
PA_ADDITION_FLAG, 
PA_QUANTITY, 
USSGL_TRANSACTION_CODE, 
STAT_AMOUNT ,
TYPE_1099,
INCOME_TAX_REGION, 
ASSETS_TRACKING_FLAG, 
PRICE_CORRECTION_-LAG, 
ORG_ID, RECEIPT_NUMBER, 
RECELP_LINE_NUMBER, 
MAICH_OPTION, 
PACKING_SLIP, 
RCV_TRANSACTION_ID, 
PA_CC _AR_INVOICE_ID, 
PA_CC_AR_INVOICE_LINE_NUM,
REFERENCE_1, REFERENCE_2,
PA_CC_PROCESSED_CODE, 
TAX_RECOVERY_RATE, 
TAX_RECOVERY_OVERRIDE_FLAG, 
TAX_RECOVERABLE_FLAG, 
TAX_CODE_OVERRIDE_FLAG, 
TAX_CODE_ID,
TAX_RATE,
CREDIT_CARD__TRX_ID,
AWARD_ID, 
VENDOR_ITEM_NUM)
VALUES
(V_INVOICE_ID, 
V_ADD_ACCS_TAX_REC.INV_LINE_ROW_ID, 
V_ADD_ACCS_TAX_REC.LINE_NUMBER, 
V_ADD_ACCS_TAX_REC.ACC_LINE_TYPE,
V_ADD ACCS_TAX_REC.LINE_GROUP_NUMBER, 
round(NVL(V_ADD_ACCS_TAX_REC.AMOUNT, 0), 2),
NULL, 
V_Description_Tax,
NULL,
DECODE (V_ADD_ACCS_TAX_REC.ACC_LINE_TYPE,
' TAX',
'Y",
NULL),

V_ADD_ACCS_TAX_REC.TAX_CODE, 
NULL, 
NULL, NULL, NULL, 
NULL, 
NULL, 
NULL, 
NULL, 
NULL, 

DECODE (V_ADD_ACCS_TAX_REC.ACC_LINE_TYPE,
'ITEM'
V_ADD_ACCS_TAX_REC.UOM,
NULL), 
NULL, 
V_ADD_ACCS_TAX_REC.DESCRIPTION,
DECODE (V_ADD_ACCS_TAX_REC.ACC_LINE_TYPE,
'ITEM'
V_ADD_ACCS_TAX_REC.QUANTITY,
NULL),
NULL,
DECODE(V_ADD_ACCS_TAX_REC.ACC_LINE_TYPE,
'ITEM'
V_ADD_ACCS_TAX_REC.UNIT_PRICE, 
NULL), 
NULL,
NULL,
NULL, 

V_ADD_ACCS_TAX_REC.DIST_CODE_COMBINATION_ID,

NULL,
NULL,
FND_PROFILE.VALUE ('USER_ID'),
SYSDATE,
FND_PROFILE.VALUE(' LOGIN_ID"),
FND_PROFILE.VALUE('USER_ID'),
SYSDATE,
NULL, 
V_ADD_ACCS_TAX_REC.COA_APPROVER,
DECODE(V_ADD_ACCS_TAX_REC.ACC_LINE_TYPE,
		'ITEM',
		V_ADD_ACCS_TAX_REC.PO_NUMBER,
		NULL),
NULL, 
NULL, 
NULL,
NULL, 
NULL, 
NULL,
NULL, 
NULL, 
NULL,

V_ADD_ACCS_TAX_REC.SAS_SHIPTO_COUNTRY,
NULL, 
NULL, 
NULL,

NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,


 
V_ADD_APINV_REC.ORG_ID,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,

DECODE (V_ADD_ACCS_TAX_REC.ACC_LINE_TYPE,
'ITEM' 
NULL,
V_TAX_RATE)
NULL,
NULL,
DECODE (V_ADD_ACCS_TAX_REC.ACC_LINE_TYPE,
'ITEM'
NULL,
V_ADD_ACCS_TAX_REC.VENDOR_ITEM_NUM)
);
EXCEPTION
WHEN OTHERS THEN
LN_ERR_CODE: = SQLCODE;
ROLLBACK;
ERRBUFF : = NVL (ERRBUFF_,
'SQL error" ||
TO_CHAR(LN-ERR_CODE) ||
'inserting into AP_INVOICE_LINES_INTERFACE FOR 0 AMOUNT!');
LN_ERR_TYPE := 2;
LV_MSG := 'OPER-INSERT, TABLE=AP_INVOICE_LINES_INTERFACE' ;
LV_MSG_NAME := 'XXIF_WHEN_OTHERS_ERROR' ;
P_ERR_MESSAGE := 'FAILURE' || SQLERRM;
ERRCODE_: - SQLCODE;
INSERT INTO XXAP_PAGERO_ERROR_LOG_T
(INVOICE_NUM, 
ERROR_TEXT, 
ERROR_CODE, 
STEP- ID, 
CREATION DATE) 
VALUES
(G_INV_NUM, 
P_ERR_MESSAGE, 
ERRCODE_,
LN_ERR_TYPE || LV_MSG_NAME || LV_MSG,
SYSDATE) ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN POS,
IN ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN _RET_ERR_CODE);
COMMIT;
END;
END LOOP;
END LOOP;


BEGIN
XXAP_VALIDATE_INTF.DOVALIDATE(P_ORG_ID => V_ADD_APINV_REC.ORG_ID,
P_SOURCE => V_ADD_APINV_REC.SOURCE,
P_PROCESS_MODE => 'N', 
P_INVOICE_ID => V_INVOICE_ID,
P_RETURN_CODE => L_RET_CODE) ;
EXCEPTION
WHEN OTHERS THEN
P_ERR_MESSAGE := 'FAILURE' || SQLERRM;
ERRCODE_:= SQLCODE;
INSERT INTO XXAP_PAGERO_ERROR_LOG_T
(INVOICE_NUM, 
ERROR_TEXT, 
ERROR_CODE, 
STEP_ID, 
CREATION_DATE) 
VALUES
(G_INV_NUM, 
P_ERR_MESSAGE, 
ERRCODE_,
LN_ERR_TYPE || LV_MSG_NAME || LV_MSG,
SYSDATE) ;

END;


BEGIN
LN
_POS: = 140;

UPDATE XXIF_AP_STD_INVS_ALL
SET STATUS_CODE = 3
WHERE INV_ROW_ID = V_ADD_APINV_REC.INV_ROW_ID;
/* END IF; */
EXCEPTION
WHEN OTHERS THEN
LN_ERR_CODE: = SQLCODE;
ROLLBACK;
ERRBUFF : = NVL (ERRBUFF_,
'SQL error" ||
TO_CHAR(LN-ERR_CODE) ||
'updating status code in XXIF_AP_STD_INVS_ALL (INV_ROW_ID: ' ||
TO_CHAR(V_ADD_APINV_REC.INV_ROW_ID) || ');
LN_ERR_TYPE := 2;
LV_MSG := 'OPER-INSERT, TABLE=XXIF_AP_STD_INVS_ALL' ;
LV_MSG_NAME := 'XXIF_WHEN_OTHERS_ERROR' ;
P_ERR_MESSAGE := 'FAILURE' || SQLERRM;
ERRCODE_: - SQLCODE;
INSERT INTO XXAP_PAGERO_ERROR_LOG_T
(INVOICE_NUM, 
ERROR_TEXT, 
ERROR_CODE, 
STEP- ID, 
CREATION DATE) 
VALUES
(G_INV_NUM, 
P_ERR_MESSAGE, 
ERRCODE_,
LN_ERR_TYPE || LV_MSG_NAME || LV_MSG,
SYSDATE) ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN POS,
IN ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN _RET_ERR_CODE);
COMMIT;
END;
LN_POS := 150;
EXCEPTION
WHEN NO_VALIDATION THEN NULL;
WHEN PROC_ERROR THEN
LN_RET_CODE : = 2;
-- RAISE;
WHEN BREAK_ LOOP THEN
NULL;
WHEN OTHERS THEN
LN_ERR_CODE : = SQLCODE;
LV_MSG := SQLERRM;
ERRBUFF : = NVL(ERRBUFF
'SQL error ' l| TO_CHAR (LN_ERR_CODE) ||
'occured at position' ||
TO_CHAR(LN_POS) || ' !);
IF UPDATE_AUDIT_FILE_STATUS(P_DATAFILE, P_DATECREATED, 9) < 0 THEN NULL;

END IF;

LN_ERR_TYPE := 1;
LV_MSG_NAME := NULL;
LN_RET_CODE := 2;
INSERT INTO XXAP_PAGERO_ERROR_LOG_T
(INVOICE_NUM, 
ERROR_TEXT, 
ERROR_CODE, 
STEP- ID, 
CREATION DATE) 
VALUES
(G_INV_NUM, 
P_ERR_MESSAGE, 
ERRCODE_,
LN_ERR_TYPE || LV_MSG_NAME || LV_MSG,
SYSDATE) ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN POS,
IN ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN _RET_ERR_CODE);
END;

END LOOP;


BEGIN
LN_POS: = 160;

UPDATE XXIF_VERSEQ_USES_ALL
LAST_UPDATE_LOGIN = FND_PROFILE.VALUE('LOGIN ID')
EXCEPTION
WHEN OTHERS THEN
LN_ERR_CODE: = SQLCODE;
ROLLBACK;
ERRBUFF_ : = NVL(ERRBUFF_,
'SQL error" || TO_CHAR(LN-ERR_CODE) ||
'updating XXIF_VERSEQ_USES! ');
LN_ERR_TYPE := 2;
LV_MSG := 'OPER-INSERT, TABLE=XXIF_VERSEQ_USES' ;
LV_MSG_NAME := 'XXIF_WHEN_OTHERS_ERROR' ;
P_ERR_MESSAGE := 'FAILURE' || SQLERRM;
ERRCODE_: - SQLCODE;
INSERT INTO XXAP_PAGERO_ERROR_LOG_T
(INVOICE_NUM, 
ERROR_TEXT, 
ERROR_CODE, 
STEP_ID, 
CREATION_DATE) 
VALUES
(G_INV_NUM, 
P_ERR_MESSAGE, 
ERRCODE_,
LN_ERR_TYPE || LV_MSG_NAME || LV_MSG,
SYSDATE) ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
COMMIT;
END;

EXCEPTION
WHEN NO_VALIDATION THEN NULL;
WHEN PROC_ERROR THEN
LN_RET_CODE : = 2;
-- RAISE;
WHEN BREAK_ LOOP THEN
NULL;
WHEN OTHERS THEN
LN_ERR_CODE : = SQLCODE;
LV_MSG := SQLERRM;
ERRBUFF : = NVL(ERRBUFF
'SQL error ' l| TO_CHAR (LN_ERR_CODE) ||
'occured at position' ||
TO_CHAR(LN_POS) || ' !);
IF UPDATE_AUDIT_FILE_STATUS(P_DATAFILE, P_DATECREATED, 9) < 0 THEN NULL;

END IF;

LN_ERR_TYPE := 1;
LV_MSG_NAME := NULL;
LN_RET_CODE := 2;
INSERT INTO XXAP_PAGERO_ERROR_LOG_T
(INVOICE_NUM, 
ERROR_TEXT, 
ERROR_CODE, 
STEP- ID, 
CREATION DATE) 
VALUES
(G_INV_NUM, 
P_ERR_MESSAGE, 
ERRCODE_,
LN_ERR_TYPE || LV_MSG_NAME || LV_MSG,
SYSDATE) ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN POS,
IN ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN _RET_ERR_CODE);
END;

END LOOP;


BEGIN
LN_POS:= 180;
SELECT NULL
INTO DUMMY_ST_CODE
FROM XXIF_VERSEQ_USES_ALL 
WHERE FILENAME = P_DATAFILE
AND CREATION_DATE = P_DATECREATED
AND CANCEL = "N'
AND STATUS_CODE != 3;


BEGIN
LN_POS := 190;
UPDATE XXIF_AUDIT_FILES_ALL
SET BATCH_NO
= NVL (BATCH_NO, 0) + 1,
LAST_UPDATED_BY = P_USER_ID,
LAST_UPDATE_LOGIN = FND_PROFILE.VALUE ('LOGINID'),
LAST_UPDATE_DATE = SYSDATE
WHERE FILENAME = P_DATAFILE
AND CREATION_DATE = P_DATECREATED;
EXCEPTION
WHEN OTHERS THEN
LN_ERR_CODE: = SQLCODE;
ROLLBACK;
ERRBUFF_ : = NVL(ERRBUFF_,
'SQL error" || TO_CHAR(LN-ERR_CODE) ||
'updating XXIF_AUDIT_FILES_ALL! ');
LN_ERR_TYPE := 2;
LV_MSG := 'OPER-UPDATE, TABLE=XXIF_AUDIT_FILES_ALL' ;
LV_MSG_NAME := 'XXIF_WHEN_OTHERS_ERROR' ;
P_ERR_MESSAGE := 'FAILURE' || SQLERRM;
ERRCODE_: - SQLCODE;
INSERT INTO XXAP_PAGERO_ERROR_LOG_T
(INVOICE_NUM, 
ERROR_TEXT, 
ERROR_CODE, 
STEP_ID, 
CREATION_DATE) 
VALUES
(G_INV_NUM, 
P_ERR_MESSAGE, 
ERRCODE_,
LN_ERR_TYPE || LV_MSG_NAME || LV_MSG,
SYSDATE) ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
COMMIT;
END;


LN_POS: = 200;
EXCEPTION WHEN NO_DATA_FOUND THEN

BEGIN
LN_POS : = 210;
UPDATE XXIF_AUDIT_FILES_ALL
SET STATUS_CODE = 3,
BATCH_NO = NVL(BATCH_NO, 0) + 1,
OPEN_INT_DATE = SYSDATE,
LAST_UPDATED_BY = P_USER_ID,
LAST_UPDATE_LOGIN = FND_PROFILE.VALUE('LOGINID'),
LAST_UPDATE_DATE = SYSDATE
WHERE FILENAME = P_DATAFILE
AND CREATION_DATE = P_DATECREATED;
EXCEPTION
WHEN OTHERS THEN
LN_ERR_CODE: = SQLCODE;
ROLLBACK;
ERRBUFF_ : = NVL(ERRBUFF_,
'SQL error" || TO_CHAR(LN-ERR_CODE) ||
'updating XXIF_AUDIT_FILES_ALL! ');
LN_ERR_TYPE := 2;
LV_MSG := 'OPER-UPDATE, TABLE=XXIF_AUDIT_FILES_ALL' ;
LV_MSG_NAME := 'XXIF_WHEN_OTHERS_ERROR' ;
P_ERR_MESSAGE := 'FAILURE' || SQLERRM;
ERRCODE_: - SQLCODE;
INSERT INTO XXAP_PAGERO_ERROR_LOG_T
(INVOICE_NUM, 
ERROR_TEXT, 
ERROR_CODE, 
STEP_ID, 
CREATION_DATE) 
VALUES
(G_INV_NUM, 
P_ERR_MESSAGE, 
ERRCODE_,
LN_ERR_TYPE || LV_MSG_NAME || LV_MSG,
SYSDATE) ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
COMMIT;
END;



WHEN TOO_MANY_ROWS THEN
-- Errors remain; no update on openint date or status_code
BEGIN
LN_POS : = 220;
UPDATE XXIF_AUDIT_FILES_ALL
SET BATCH _NO = NVL (BATCH_NO, 0) + 1,
LAST_UPDATED_BY = P_USER_ID,
LAST_UPDATE_LOGIN = FND_PROFILE.VALUE('LOGIN ID'),
LAST_UPDATE_DATE = SYSDATE
WHERE FILENAME = P_ DATAFILE
AND CREATION DATE = P_DATECREATED;

WHEN OTHERS THEN
LN_ERR_CODE: = SQLCODE;
ROLLBACK;
ERRBUFF_ : = NVL(ERRBUFF_,
'SQL error" || TO_CHAR(LN-ERR_CODE) ||
'updating XXIF_AUDIT_FILES_ALL! ');
LN_ERR_TYPE := 2;
LV_MSG := 'OPER-UPDATE, TABLE=XXIF_AUDIT_FILES_ALL' ;
LV_MSG_NAME := 'XXIF_WHEN_OTHERS_ERROR' ;
P_ERR_MESSAGE := 'FAILURE' || SQLERRM;
ERRCODE_: - SQLCODE;
INSERT INTO XXAP_PAGERO_ERROR_LOG_T
(INVOICE_NUM, 
ERROR_TEXT, 
ERROR_CODE, 
STEP_ID, 
CREATION_DATE) 
VALUES
(G_INV_NUM, 
P_ERR_MESSAGE, 
ERRCODE_,
LN_ERR_TYPE || LV_MSG_NAME || LV_MSG,
SYSDATE) ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
COMMIT;
END;


WHEN PROC_ERROR THEN NULL;

WHEN OTHERS THEN
LN_ERR_CODE: = SQLCODE;
ROLLBACK;
ERRBUFF_ : = NVL(ERRBUFF_,
'SQL error" || TO_CHAR(LN-ERR_CODE) ||
'selecting from XXIF_AUDIT_FILES_ALL! ');
LN_ERR_TYPE := 2;
LV_MSG := 'OPER=SELECT, TABLE=XXIF_VERSE_USES' ;
LV_MSG_NAME := 'XXIF_WHEN_OTHERS_ERROR' ;
P_ERR_MESSAGE := 'FAILURE' || SQLERRM;
ERRCODE_: - SQLCODE;
INSERT INTO XXAP_PAGERO_ERROR_LOG_T
(INVOICE_NUM, 
ERROR_TEXT, 
ERROR_CODE, 
STEP_ID, 
CREATION_DATE) 
VALUES
(G_INV_NUM, 
P_ERR_MESSAGE, 
ERRCODE_,
LN_ERR_TYPE || LV_MSG_NAME || LV_MSG,
SYSDATE) ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
COMMIT;
END;


LN_POS : = 240;
COMMIT;
LN_POS : = 250;
LN_POS : = 252;

LI_POS := 280;

/* END IF;*/ -- IF V_rows_found
LN_POS := 290;
EXCEPTION
WHEN PROC_ERROR THEN NULL;
LN_RET_CODE : = 2;
WHEN LOCKED_RECORDS_EXC THEN
ROLLBACK;
LV_ERR_BUF:= 'You cannot start an import before the previous one for the same file is completed.';
LN_ERR_TYPE : = 2;
LN_ERR_CODE := SQLCODE;
LV_MSG := *You cannot start an import before the previous one for the same file is completed.';.
LV_MSG_NAME : = '';

XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
COMMIT;
LN RET_CODE := 2;
WHEN OTHERS THEN
LN_ERR_CODE: = SQLCODE;
LV_MSG : = SQLERRM;
ROLLBACK;
LV_ERR_BUF : = NVL (ERRBUFF -
'SQL error II TO_CHAR(LN _ERR_CODE) ||
'occured at position ' || TO_CHAR (LN_POS) || '!');
LN_ERR_TYPE := 1;
LV_MSG_NAME : NULL;
INSERT INTO XXAP_PAGERO_ERROR_LOG_T
(INVOICE_NUM, 
ERROR_TEXT, 
ERROR_CODE, 
STEP- ID, 
CREATION DATE) 
VALUES
(G_INV_NUM, 
P_ERR_MESSAGE, 
ERRCODE_,
LN_ERR_TYPE || LV_MSG_NAME || LV_MSG,
SYSDATE) ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN POS,
IN ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN _RET_ERR_CODE);
COMMIT;
END;

END IF;

EXCEPTION
WHEN PROC_ERROR THEN NULL;
LN_RET_CODE : = 2;
WHEN LOCKED_RECORDS_EXC THEN
ROLLBACK;
LV_ERR_BUF:= 'You cannot start an import before the previous one for the same file is completed.';
LN_ERR_TYPE : = 2;
LN_ERR_CODE := SQLCODE;
LV_MSG := *You cannot start an import before the previous one for the same file is completed.';.
LV_MSG_NAME : = '';

XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
COMMIT;
LN RET_CODE := 2;
WHEN OTHERS THEN
LN_ERR_CODE: = SQLCODE;
LV_MSG : = SQLERRM;
ROLLBACK;
LV_ERR_BUF : = NVL (ERRBUFF_
'SQL error || TO_CHAR(LN _ERR_CODE) ||
'occured at position ' || TO_CHAR(LN_POS) || '!');
LN_ERR_TYPE := 1;
LV_MSG_NAME : NULL;
INSERT INTO XXAP_PAGERO_ERROR_LOG_T
(INVOICE_NUM, 
ERROR_TEXT, 
ERROR_CODE, 
STEP_ID, 
CREATION_DATE) 
VALUES
(G_INV_NUM, 
P_ERR_MESSAGE, 
ERRCODE_,
LN_ERR_TYPE || LV_MSG_NAME || LV_MSG,
SYSDATE) ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
COMMIT;
LN_RET_CODE := 2;
END xxap_iata_validate_intf_tabs_P;


PROCEDURE xxap_iata_attach_parse_P(P_file_nameM VARCHAR2,
P_parent_dir_name VARCHAR2) IS
CURSOR xml_to_db_iata_attach(P_xml_type IN XmItype) IS
SELECT x.
FROM XMLTABLE(' /SISPayablesIndexTransmission/SISPayablesIndexHeader'
passing P_xm1_type columns Version VARCHAR2(100) PATH
' ./Version',
TransmissionID VARCHAR2(100) PATH *•/TransmissionID',
BilledMember VARCHAR(10) PATH './BilledMember'
ClearanceMonth VARCHAR(10) PATH ' /ClearanceMonth', 
PeriodNum NUMBER PATH './PeriodNum', 
BillingCategory CHAR(1) PATH './BillingCategory') x;


CURSOR xm1_to_db_iata_hdr_c(P_xml_type IN XmItype) IS
SELECT x.*
FROM XMLTABLE ('/SISPayablesIndexTransmission/SISPayablesIndexHeader/InvoiceHeader'
passing P_xml_type columns CELLS XMLTYPE PATH .'
BillingMember VARCHAR2(10) PATH './BillingMember' 
InvoiceNumber VARCHAR2(50) PATH './InvoiceNumber'

E_Inv_SrNO NUMBER PATH './EInvoicingFiles[1]/SrNo', 
E_Inv_FileName VARCHAR(1000) PATH './EInvoicingFiles[1]/FileName'
E_Inv_SNO2 NUMBER PATH './EInvoicingFiles[2]/SrNo',
E_Inv_FileName2 VARCHAR (1000) PATH './EInvoicingFiles[2]/FileName',
D_Inv_SNO NUMBER PATH './DetailedListingFiles[1]/SrNo',
D_Inv_FileName VARCHAR(1000) PATH './DetailedListingFiles[1]/FileName'
D_Inv_SNO_1 NUMBER PATH './DetailedListingFiles[2]/SrNo',
D_Inv_FileNamel VARCHAR(1000) PATH './DetailedListingFiles[2]/FileName') x;


CURSOR xml_to_db_iata_sup_attach_c(P_xml_type IN Xmltype) IS
SELECT x.AttachmentNumber, x.AttachmentFileName
FROM XMLTABLE('/InvoiceHeader/InvoiceSupportingAttachments' passing
P_xml_type columns AttachmentNumber NUMBER PATH
'./AttachmentNumber',
AttachmentFileName VARCHAR(1000) PATH
﻿/AttachmentFileName') x;
﻿
i_attachment_id NUMBER;
V_HAS_SUPP_ATTACH CHAR(1);


CURSOR xml_to_db_iatab_attach(P_xml_type IN XmItype) IS
SELECT x.*
FROM XMLTABLE('/SISPayablesDailyMiscIndexTransmission/SISPayablesDailyMiscIndexHeader'
passing p_xml_type columns Version VARCHAR2(100) PATH './Version',
TransmissionID VARCHAR2(100) PATH './TransmissionID',
BilledMember VARCHAR(10) PATH './BilledMember'
ClearanceMonth VARCHAR(10) PATH './ClearanceMonth', 
PeriodNum NUMBER PATH './PeriodNum'
BillingCategory CHAR(1) PATH './BillingCategory') 



















CURSOR xml_to_db_iatab_hdr_c (P_xml_type IN XmItype) IS
SELECT x.*
FROM XMLTABLE('/SISPayablesDailyMiscIndexTransmission/SISPayablesDailyMiscIndexHeader/InvoiceHeader'
passing P_ml_type columns CELLS XMLTYPE PATH '.',
BillingMember VARCHAR2(10) PATH './BillingMember',
InvoiceNumber VARCHAR2(50) PATH './InvoiceNumber',
E_Inv_SrNO NUMBER PATH './EInvoicingFiles[11/5rNo',
E_Inv_FileName VARCHAR(1000) PATH './EInvoicingFiles [1]/FileName',

E_Inv_SrNO2 NUMBER PATH './EInvoicingFiles[2]/SrNo',
E_Inv_FileName2 VARCHAR(1000) PATH './EInvoicingFiles[2]/FileName',

D_Inv_SNO NUMBER PATH './DetailedListingFiles[1]/SNo',
D_Inv_FileName VARCHAR (1000) PATH './DetailedListingFiles[1]/FileName',
D_Inv_SrNO_1 NUMBER PATH './DetailedListingFiles[2]/SrNo',
D_Inv_FileName1 VARCHAR (1000) PATH './DetailedListingFiles[1]/FileName',) x;


BEGIN
LN_POS := 41;

FOR xmI_to_db_iata_attach_d IN xml_to_db_iata_attach(xmItype(bfilename(G_XML_PROCESS_ID,
p_file_name) ,
nls_charset_id ('AL32UTF8'))) LOOP

LN_POS : = 42;
FOR xml_to_db_iata_hdr_D IN xml_to_db_iata_hdr_c(xmItype(bfilename(G_XML_PROCESS D,
P_file_name) ,
n1s_charset_id('AL32UTF&'))) LOOP

LN_POS := 43;
V_HAS_SUPP_ATTACH := 'N';
BEGIN
SELECT xxif_ap_iata_index_attach_s.NEXTVAL
INTO i_attachment_id
FROM dual;
EXCEPTION
WHEN OTHERS THEN
In_err_code := SQLCODE;
In_err_type : = 2;
Iv_msg := 'OPER-SELECT, TABLE XXIF_AP_TATA_INDEX ATTACH_S,FILENAME= '||
P_file_name;
Iv_msg_name := 'XXIF_WHEN_OTHERS_ERROR';
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
RAISE PROC_ERROR;
END;

LN_POS := 44;

BEGIN
INSERT ISTO xxif_ар_iata_Index_attach_t
(attachment_id,
Version,
Iransmission_ID,
Billedhember, 
ClearanceMonth, 
PeriodNun, 
BillingCategory, 
B11lingMember, 
Invoice Nun, 
E_Iny_SINO,
E_Inv_FileName,
D_Inv_SrNO,
D_Inv_FileName,
created _by, 
creation_date, 
Last_updated_py, 
last_update_date, 
last_update_login，
D_Inv_SrNO_1, 
D_Inv_FileName1) 
VALUES
(i_attachment_id, 
xml_to_db_iata_attach_d.Version,
xml_to_db_iata_attach_d.TransmissionID,
xml_to_db_iata_attach_d.BilledMember,
xml_to_db_iata_attach_d.ClearanceMonth,
xml_to_db_iata_attach_d.PeriodNun,
xml_to_db_iata_attach_d.BillingCategory,
xml_to_db_iata_hdr_D.BillingMember,
xml_to_db_iata_hdr_D.InvoiceNumber，

case

when substr(xmI_to_db_iata_hdr_D.E_Inv_FileName, (instr(xml_to_db_iata_hdr_D.E_Inv_FileName,'.', -1) + 1), 4) = 'MINV'
then xml_to_db_iata_hdr_D.E_Inv_SrNO
else xml_to_db_iata_hdr_D.E_Inv_SrN02
end 

case
when substr(xml_to_db_iata_hdr_D.E_Inv_FileName, (instr(xmI_to_db_iata hdr_D.E_Inv_FileName,
'/'，-1）+1）， 4）= 'MINV'
then xml_to_db_iata_hdr_D.E_Inv_FileName
else xml_to_db_iata_hdr_D.E_Inv_FileName2
end 
xmI_to_db_iata_har_D.D_Inv_srNo,
xml_to_db_iata_han_D.D_Inv_FileName,

fnd_global.USER_ID, 
SYSDATE,
Fnd_global.USER_ID, 
SYSDATE,
fnd_global.LOGIN_ID,
xml_to_db_iata_hdr_D.D_Inv_SrNO_1,
decode (xml_to_db_iata_hdr_D.D_Inv_FileNamel, null, null, '/'|| P_parent_dir_name ||xml_to_db_iata_hdr_D.D_Inv_FileName1) 
) ;
EXCEPTION
WHEN OTHERS THEN
In_err_code : = SQLCODE;
In_err_type := 2;
Iv_msg := 'OPER INSERT, TABLE XXIF_AP_IATA_INDEX_ATTACH_T, FILENAME= '||
P_file_name;
Iv_msg_name := XXIF_WHEN_OTHERS_ERROR" ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
RAISE PROC_ERROR;
END;


LN_POS : = 45;
FOR xml_to_db_iata_sup_attach_D IN xml_to_ab_iata_sup_attach_c(xml_to_db_iata_hdr_D.cells) LOOP
LN_POS : = 46;

V_HAS_SUPP_ATTACH := "Y';
BEGIN
INSERT INTO xxif_ap_iata_supp_attach_t
(attachment_id,
AttachmentNum, 
AttachFileName, 
created_by, 
creation date, 
last_updated_by, 
last_update_date, 
last_update_login)
VALUES
(i_attachment_id,
xml_to_db_iata_sup_attach_D.AttachmentNumber,
;/' || P_parent_dir_name ||
xml_to_db_iata_sup_attach_D.AttachmentFileName,
fnd_global.USER_ID, 
SYSDATE,
fnd_global.USER_ID,
SYSDATE,
fnd_global.LOGIN_ID);
EXCEPTION
WHEN OTHERS THEN
In_err_code : = SQLCODE;
In_err_type := 2;
Iv_msg := 'OPER=INSERT, TABLE=XXIF_AP_IATA_SUPP_ATTACH_T' ;
Iv_msg_name := XXIF_WHEN_OTHERS_ERROR" ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
RAISE PROC_ERROR;
END;
END LOOP;


IF V_HAS_SUPP_ATTACH = 'Y' THEN
BEGIN
UPDATE ap_invoices_interface aii
SET aii.global_attribute11 = (SELECT MAX(t.attachment_id)
FROM XXIF_AP_IATA_INV_HDR_T  XAIIT,
XXIF_AP_STD_INVS_ALL XASIA,

xxif_ap_iata_index_attach_t t
WHERE TO_CHAR(XAIIT. INVOICE_ID) =
XASIA. ID 
AND XAIIT.INVOICE_NUM ||
XAIIT.SELLERORGANIZATIONID =
t.invoice_num ||
t.billingmember
AND t.invoice_num ||
t.billingmember = 
xml_to_db_iata_hdr_D.InvoiceNumber ||
xml_to_db_iata_hdr_D.BillingMember)
 
WHERE aii.SOURCE in ( 'IATA', 'IATAMISCB' )
AND AII.INVOICE_ ID IN
(SELECT XASIA.INV_ROW_ID
FROM XXIF_AP_IATA_INV_HDR_T XAIIT,
XXIF_AP._STD_INVS_ALL XASIA,
xxif_ap_iata_index_attach_t t
WHERE TO_CHAR(XAIIT.INVOICE_ID) = XASIA.ID
AND XAIIT.INVOICE_NUM || XAIIT.SELLERORGANIZATIONID =
t.invoice_num  || t.billingmember
AND t.invoice_num || t.billingmember =
xml_to_db__iata_hdr_D.InvoiceNumber ||
xml_to_db_iata_hdr_D, BillingMember);
EXCEPTION
WHEN OTHERS THEN
ln err_code: = SQLCODE;
ln_err_type : = 2;
lv_msg:= 'OPER-UPDATE, TABLE=XXIF_AP_STD_INVS_ALL, IMAGE= ';
Iv_msg_ name := 'XXIF_WHEN_OTHERS_ERROR";
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
RAISE PROC_ERROR;
END;
END IF;
END LOOP;
END LOOP;


----Bilateral invoices
FOR xml_to_db_iata_attach_d IN xmI_to_db_iatab_attach (xmItype (bfilename(G_XML_PROCESS D,
P_ file_name),
nls_charset_id('AL32UTF8'))) LOOP
LN_POS := 42;
FOR xml_to_db_iata_hdr_D IN xml_to_db_iatab_hdr_c(xmltype(bfilename(G_XML_PROCESS_D,
P_file_name),
nls_charset_id([AL32UTF8'))) LOOP

LN_POS := 43;
V_HAS_SUPP_ATTACH := 'N';
BEGIN
SELECT xxif_ap_iata_index_attach_s.NEXTVAL
INTO i_attachment_id
FROM dual;
EXCEPTION
WHEN OTHERS THEN
ln err_code: = SQLCODE;
ln_err_type : = 2;
lv_msg:= 'OPER=SELECT, TABLE=XXIF_AP_IATA_INDEX_ATTACH_S, FILENAME = ' ||
p_file_name;
Iv_msg_ name := 'XXIF_WHEN_OTHERS_ERROR";
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
RAISE PROC_ERROR;
END;

LN_POS := 44;
BEGIN
INSERT INTO xxif_ар_iata_Index_attach_t
(attachment_id,
Version,
Iransmission_ID,
Billedhember, 
ClearanceMonth, 
PeriodNun, 
BillingCategory, 
B11lingMember, 
Invoice Nun, 
E_Iny_SINO,
E_Inv_FileName,
D_Inv_SrNO,
D_Inv_FileName,
created_by, 
creation_date, 
Last_updated_py, 
last_update_date, 
last_update_login，
D_Inv_SrNO_1, 
D_Inv_FileName1) 
VALUES
(i_attachment_id, 
xml_to_db_iata_attach_d.Version,
xml_to_db_iata_attach_d.TransmissionID,
xml_to_db_iata_attach_d.BilledMember,
xml_to_db_iata_attach_d.ClearanceMonth,
xml_to_db_iata_attach_d.PeriodNun,
xml_to_db_iata_attach_d.BillingCategory,
xml_to_db_iata_hdr_D.BillingMember,
xml_to_db_iata_hdr_D.InvoiceNumber，


case

when substr(xmI_to_db_iata_hdr_D.E_Inv_FileName, (instr(xml_to_db_iata_hdr_D.E_Inv_FileName,'.', -1) + 1), 4) = 'MINV'
then xml_to_db_iata_hdr_D.E_Inv_SrNO
else xml_to_db_iata_hdr_D.E_Inv_SrN02
end 

case
when substr(xml_to_db_iata_hdr_D.E_Inv_FileName, (instr(xmI_to_db_iata hdr_D.E_Inv_FileName,
'/'，-1）+1）， 4）= 'MINV'
then xml_to_db_iata_hdr_D.E_Inv_FileName
else xml_to_db_iata_hdr_D.E_Inv_FileName2
end 
xmI_to_db_iata_har_D.D_Inv_srNo,
xml_to_db_iata_han_D.D_Inv_FileName,

fnd_global.USER_ID, 
SYSDATE,
Fnd_global.USER_ID, 
SYSDATE,
fnd_global.LOGIN_ID,
xml_to_db_iata_hdr_D.D_Inv_SrNO_1,
decode (xml_to_db_iata_hdr_D.D_Inv_FileNamel, null, null, '/'|| P_parent_dir_name ||xml_to_db_iata_hdr_D.D_Inv_FileName1) 
) ;
EXCEPTION
WHEN OTHERS THEN
In_err_code : = SQLCODE;
In_err_type := 2;
Iv_msg := 'OPER INSERT, TABLE XXIF_AP_IATA_INDEX_ATTACH_T, FILENAME= '||
P_file_name;
Iv_msg_name := XXIF_WHEN_OTHERS_ERROR" ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
RAISE PROC_ERROR;
END;


LN_POS : = 45;
FOR xml_to_db_iata_sup_attach_D IN xml_to_ab_iata_sup_attach_c(xml_to_db_iata_hdr_D.cells) LOOP
LN_POS : = 46;

V_HAS_SUPP_ATTACH := "Y';
BEGIN
INSERT INTO xxif_ap_iata_supp_attach_t
(attachment_id,
AttachmentNum, 
AttachFileName, 
created_by, 
creation date, 
last_updated_by, 
last_update_date, 
last_update_login)
VALUES
(i_attachment_id,
xml_to_db_iata_sup_attach_D.AttachmentNumber,
;/' || P_parent_dir_name ||
xml_to_db_iata_sup_attach_D.AttachmentFileName,
fnd_global.USER_ID, 
SYSDATE,
fnd_global.USER_ID,
SYSDATE,
fnd_global.LOGIN_ID);
EXCEPTION
WHEN OTHERS THEN
In_err_code : = SQLCODE;
In_err_type := 2;
Iv_msg := 'OPER=INSERT, TABLE=XXIF_AP_IATA_SUPP_ATTACH_T' ;
Iv_msg_name := XXIF_WHEN_OTHERS_ERROR" ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
RAISE PROC_ERROR;
END;
END LOOP;


IF V_HAS_SUPP_ATTACH = 'Y' THEN
BEGIN
UPDATE ap_invoices_interface aii
SET aii.global_attribute11 = (SELECT MAX(t.attachment_id)
FROM XXIF_AP_IATA_INV_HDR_T  XAIIT,
XXIF_AP_STD_INVS_ALL XASIA,

xxif_ap_iata_index_attach_t t
WHERE TO_CHAR(XAIIT. INVOICE_ID) =
XASIA. ID 
AND XAIIT.INVOICE_NUM ||
XAIIT.SELLERORGANIZATIONID =
t.invoice_num ||
t.billingmember
AND t.invoice_num ||
t.billingmember = 
xml_to_db_iata_hdr_D.InvoiceNumber ||
xml_to_db_iata_hdr_D.BillingMember)
 
WHERE aii.SOURCE in ( 'IATA', 'IATAMISCB' )
AND AII.INVOICE_ ID IN
(SELECT XASIA.INV_ROW_ID
FROM XXIF_AP_IATA_INV_HDR_T XAIIT,
XXIF_AP._STD_INVS_ALL XASIA,
xxif_ap_iata_index_attach_t t
WHERE TO_CHAR(XAIIT.INVOICE_ID) = XASIA.ID
AND XAIIT.INVOICE_NUM || XAIIT.SELLERORGANIZATIONID =
t.invoice_num  || t.billingmember
AND t.invoice_num || t.billingmember =
xml_to_db__iata_hdr_D.InvoiceNumber ||
xml_to_db_iata_hdr_D, BillingMember);
EXCEPTION
WHEN OTHERS THEN
ln err_code: = SQLCODE;
ln_err_type : = 2;
lv_msg:= 'OPER-UPDATE, TABLE=XXIF_AP_STD_INVS_ALL, IMAGE= ';
Iv_msg_ name := 'XXIF_WHEN_OTHERS_ERROR";
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
RAISE PROC_ERROR;
END;
END IF;
END LOOP;
END LOOP;



---/Bilateral invoices
LN_POS: = 47;
--update staging table and inteface table for image population
BEGIN
UPDATE xxif_ap_std_invs_all XASIA
SET inv_image = (SELECT substr(t.e_inv_filename,
instr(t.e_inv_filename, '/', -1, 1) + 1)
FROM xxif_ap_iata_index_attach_t t, xxif_ap_iata_inv_hdr_t  xaiit
WHERE xaiit.invoice_num ||
xaiit.sellerorganizationid =
t.invoice_num || t_BILLINGMEMBER
AND TO_CHAR (XAIIT.INVOICE_ID) = XASIA.ID
GROUP BY substr(t.e_inv_filename,
instr(t.e_inv_filename, '/', -1, 1) + 1))
WHERE SOURCE in ('IATA', 'IATAMISCB') 

AND inv_image IS NULL;
EXCEPTION
WHEN OTHERS THEN
ln err_code: = SQLCODE;
ln_err_type : = 2;
lv_msg:= 'OPER-UPDATE, TABLE=XXIF_AP_STD_INVS_ALL, IMAGE= ';
Iv_msg_ name := 'XXIF_WHEN_OTHERS_ERROR";
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
RAISE PROC_ERROR;
END;


LN_POS: = 48;
BEGIN
UPDATE ap_invoices_ interface AII
SET ATTRIBUTE10 - (SELECT INV_ IMAGE
FROM XXIF_AP_STD_INVS_ALL XASIA
WHERE XASIA.INV_ROW_ID = AII. INVOICE_ID)
WHERE SOURCE in ('IATA', 'IATAMISB' )
AND ATTRIBUTE10 IS NULL;

EXCEPTION
WHEN OTHERS THEN
ln err_code: = SQLCODE;
ln_err_type : = 2;
lv_msg:= 'OPER-UPDATE, TABLE=AP_INVOICES_INTERFACE ';
Iv_msg_ name := 'XXIF_WHEN_OTHERS_ERROR";
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
RAISE PROC_ERROR;
END;

EXCEPTION
WHEN OTHERS THEN
In_err_code := SQLCODE;
In_err_type : = 2;
Iv_msg := 'OPER=PROCEDURECALL, TABLE XXIF_AP_TATA_ATTACH_P,FILENAME= '||
P_file_name;
Iv_msg_name := 'XXIF_WHEN_OTHERS_ERROR';
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
RAISE PROC_ERROR;
END;


xxap_iata_attach_parse_P;
PROCEDURE xxap_iata_gen_pdf_merge_file_P(P_request_id NUMBER,
P_modified_f_name VARCHAR2) IS

CURSOR iata_pdf_mapping_c IS
SELECT XASIA.INV_ROW_ID,
xaiiht.invoice_num,
sellerorganizationid,
T.E_INV_FILENAME,
decode(lower (SUBSTR(T.D_INV_FILENAME, INSTR(T.D_INV_FILENAME, '.', -1))), '.pdf', T.D_INV_FILENAME, SUBSTR(T.D_INV_FILENAME1, INSTR(D_INV_FILENAME, '.', 1, 2))) D_INV_FILENAME
FROM XXIF_VERSEQ_USES_ALL XVUA,
XXIF_AP_STD_INVS_ALL XASIA,
xxif_ap_iata_inv_hdr_t xaiiht,
xxif_ap_iata_index_attach_t t

WHERE filename LIKE P_modified_f_name || '%'
AND XVUA.VEN_ROW_ID = XASIA. VEN_ROW_ ID
AND xaiiht. invoice_num || xaiiht.sellerorganizationid =
t.invoice_num || t.BILLINGMEMBER
AND XAIIHT.INVOICE_ID = XASIA.ID;

1_file UTL_FILE.file_type;
P_reg_file_txt_dir VARCHAR2(50) := 'XXAP_ISP_INV_TXT_DIR';
l_file_name VARCHAR2(60) := P_request_id || '_' || 'IATA.txt';
BEGIN
LN_POS := 49;
FOR iata_pdf_mapping_d IN iata_pdf_mapping_c LOOP
LN_POS := 50;
BEGIN
l_file := UTL_FILE.fopen(p_req_file_txt_dir, l_file_name, 'A');
UTL_FILE.put_line(l_file,
iata_pdf_mapping_d.e_Inv_Filename || '/' ||
iata_pdf.mapping_d.d_Inv_Filename);

UTL_FILE.fclose(l_file);


EXCEPTION
WHEN OTHERS THEN
ln err_code: = SQLCODE;
ln_err_type : = 2;
lv_msg:= 'OPER=FILE_UPDATE, PROCEDURE=XXAP_IATA_GEN_PDF_MERGE_FILE_P ';
Iv_msg_name := 'XXIF_WHEN_OTHERS_ERROR";
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
RAISE PROC_ERROR;
END;

EXCEPTION
WHEN OTHERS THEN
In_err_code : = SQLCODE;
In_err_type : = 2;
Iv_msg := 'OPER=PROCEDURECALL, TABLE=XXAP_IATA_GEN_PDF_MERGE_FILE_P , FILENAME = ' || P_modified_f_name;
Iv_msg_name: = XXIF_WHEN_OTHERS
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
RAISE PROC_ERROR;
END xxap_iata_gen_pdf_merge_file_P;



PROCEDURE xxap_iata_supp_attch_upload_P(P_request_id NUMBER) IS
CURSOR iata_supP_attach_c IS
SELECT invoice_id, attachfilename
FROM ap_invoices_all aia, XXIF_AP_IATA_SUPP_ATTACH_T xaisat
WHERE aia.global_attribute11 = to_char(xaisat.attachment_id)
AND SOURCE in ('IATA', 'IATAMISB') 
AND AIA.GLOBAL_ATTRIBUTE11 IS NOT NULL;
1_file      UTL_FILE.file_type;
P_req_file_txt_dir VARCHAR2(50) := 'XXAP_ISP_INV_TXT_DIR';
1_file_name VARCHAR2(60) := p_request_id || '_' ||
'IATA_SUPP_ATTACH. txt';
BEGIN
LN_POS := 49;
FOR iata_supp_attach_D IN iata_supp_attach_C LOOP
LN_POS := 50;
BEGIN
l_file := UTL_FILe.fopen(P_req_file_txt_dir, l_file_name, "A');
UTL_FILE.put_line(l_file,
lata_supp_attach_D.invoice_id ||'|' ||
iata_supp_attach_D.Attachfilename);
UTL_FILE.fclose(l_file);
EXCEPTION
WHEN OTHERS THEN
In_err_code := SQLCODE;
In_err_type : = 2;
Iv msg: = 'OPER-FILE_UPDATE, PROCEDURE XXAP_IATA_SUPP_ATTACH_UPLOAD_P' ;
Iv_msg_name := XXIF_WHEN_OTHERS._ERROR ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
RAISE PROC_ERROR;
END;
END LOOP;


BEGIN
UPDATE ap_invoices_all a
SET global_attribute11 = NULL
WHERE invoice_id IN
(SELECT DISTINCT invoice id
FROM ap_invoices_all aia, XXIF_AP_IATA_SUPP_ATTACH_T xaisat
WHERE aia.global_attributell = to_char(xaisat.attachment_id)
AND SOURCE = a.source 
AND AIA.GLOBAL_ATTRIBUTE11 IS NOT NULL)
AND SOURCE in ('IATA', 'IATAMISCB') 
EXCEPTION
WHEN OTHERS THEN
In_err_code := SQLCODE;
In_err_type : = 2;
Iv msg: = 'OPER=UPDATE, TABLE= AP_INVOICES_INTERFACE';
lv_msg_name := XXIF_WHEN_OTHERS._ERROR ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
RAISE PROC_ERROR;
END;

EXCEPTION
WHEN OTHERS THEN
ln_err_code := SQLCODE;
ln_err_type : = 2;
lv msg := 'OPER-PROCEDURECALL, TABLE-XXAP_IATA_SUPP_ATTACH_UPLOAD_P, REQUEST_ID= ||
P_request_id;
lv_msg_name := XXIF_WHEN_OTHERS._ERROR ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
RAISE PROC_ERROR;
END xxap_iata_supp_attch_upload_P;


PROCEDURE xxap_iata_attch_upload_pre(p_request_id NUMBER) IS
---below cursor changed for v1.11
CURSOR iata_supp_attach_pre_c IS
SELECT DISTINCT AIi.INVOICE_ID,
AIi.INVOICE._NUM,
XAISAT.attachfilename attach_file_name,
SUBSTR(XAISAT.attachfilename,
INSTR(XAISAT.attachfilename, 'SUPPDOCS/') + 9) file_name, 
AIi.SOURCE,
XAISAT_ATTACHMENT_ID
FROM 
xxif_ap_iata_index_attach_t xaiiat, 
xxif_ap_iata_inv_hdr_t xaiiht,
xxif_ap_std_invs_all xasia,
ap_invoices_interface aii,
xxif_ap_iata_supp_attach_t XAISAT
WHERE xaiiat.billingmember || xaiiat.invoice_num =
xaiiht.sellerorganizationid || xaiiht.invoice_num
AND xaisat.attachment_id = xaiiat.attachment_id
AND to_char(xaiiht.invoice_id) = xasia.id
AND aii.invoice_id = xasia.inv_row_id
-- and aii.org_ id = 101
AND aii.SOURCE in ('IATA', 'IATAMISCB') 
union
SELECT DISTINCT AIi.INVOICE_ID,
AIi.INVOICE_NUM, 
DECODE (LOWER(SUBSTR(xaiiat.D_INV_FILENAME1, INSTR(xaiiat.D_INV_FILENAME1, '.', -1))), '.CSV', xaiiat.D_INV_FILENAME1, 1, INSTR(xaiiat.D_INV_FILENAME1, '/',2) -1) || xaiiat.D_INV_FILENAME) attach_file_name,
SUBSTR(DECODE (LOWER(SUBSTR(xaiiat.D_INV_FILENAME1, INSTR(xaiiat.D_INV_FILENAME1, '.', -1))),,xaliat.D_INV_FILENAMI, '.CSV', xaiiat.D_INV_FILENAME1, xaiiat.D_INV_FILENAME),
INSTR(DECODE (LOWER(SUBSTR(xaiiat.D_INV_FILENAME1, INSTR(xaiiat.D_INV_FILENAME1, '.', -1))), '.CSV', xaiiat.D_INV_FILENAME, xaiiat.D_INV_FILENAME), 'LISTING/') +9) file_name,
Aii.SOURCE, 
xaiiat.ATTACHMENT_ID
FROM xxif_ap_iata_index_attach_t xaiiat,
xxif__ap_iata_inv_hdr_t xaiiht,
XXLF_ap_std_invs_all xasia,
ap_invoices_interface aii

WHERE xaiiat.billingmember || xaiiat.invoice_num =
xaiiht.sellerorganizationid || xaiiht.invoice_num

AND to_char(xaiiht.invoice_id) - xasia.id
AND aii.invoice_id = xasia.inv_row_id

AND xaiiat.D_INV_FILENAME1 is not null
AND aii. SOURCE in ('TATA', 'IATAMISC*);
l_file  UTL_FILE.file_type;
p_req_file_txt_dir VARCHAR2(60) := 'XXAP_ISP_INV_TXT_DIR',
 l_file_name VARCHAR(60) := p_request_id || '_' ||
'IATA_SUPP_ATTACH.txt';
l_count NUMBER;

BEGIN
LN_POS := 49;
FOR iata_supp_attach_D IN iata_supp_attach_pre_c LOOP
LN_POS : = 50;
BEGIN
SELECT COUNT (*)
INTO l_count
FROM END_ATTACHED_DOCS_FORM_VL
WHERE ENTITY_NAME = 'AP_INVOICES_INTERFACE'
AND FUNCTION_NAME = XXAPXIISIM'

AND pkl_value = TO_CHAR(iata_supp_attach_D.invoice_id)
AND file_name - iata_supp_attach_D.file_name;
END;

IF l_count = 0 THEN
BEGIN
l_file := UTL_FILE.fopen(P_req_file_txt_dir, l_fife_name, 'A');

UTL_FILE.put_line(l_file,
iata_supp_attach_D.invoice id || '|' ||
iata_supp_attach_D.attach_file_name) ;
UTL_FILE.Fclose(l_file);


EXCEPTION
WHEN OTHERS THEN
In_err_code := SQLCODE;
Ln_err_type : = 2;
Ln_msg := 'OPER-FILE_UPDATE, PROCEDURE=XXAP_IATA_SUPP_ATTACH_UPLOAD_P' ;
LN_msg_name : = XXIF_WHEN _OTHERS_ERROR';
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
RAISE PROC_ERROR;
END;
END IF;
END LOOP;


EXCEPTION
WHEN OTHERS THEN
In_err_code : = SQLCODE;
In_err_type := 2;
Iv_msg = 'OPER-PROCEDURECALL, TABLE=XXAP_IATA_SUPP_ATTACH_UPLOAD_P, REQUEST_ID= '|| 
P_request_id;
Iv_msg_name := 'XXIF_WHEN_OTHERS_ERROR' ;
XXS_ERRLOG_PKG.LOG_ERROR(LV_PCK,
LV_ROUT,
LN_POS,
IN_ERR_TYPE,
LN_ERR_CODE,
IV_MSG,
LV_ERR_BUF,
LV_MSG_NAME,
LN_RET_ERR_CODE);
RAISE PROC_ERROR;

END xxap_iata_attch_upload_pre;
END xxap_iata_inv_process_pck;